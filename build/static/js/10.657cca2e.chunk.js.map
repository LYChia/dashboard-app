{"version":3,"sources":["infrastructure/api-proxy-core.ts","infrastructure/generated/proxies/api-proxies.ts","components/global/ThemeTooltip.tsx","logic/common/themeUtils.ts","infrastructure/session-manager.ts","infrastructure/utils.ts","infrastructure/env-facade.ts","infrastructure/data-service-base.ts","services/users.service.ts","services/minions.service.ts","hooks/useData.ts","infrastructure/generated/api/api.ts","hooks/useLiveliness.ts","services/settings.service.ts","services/liveliness.service.ts","static/logo-app.png","components/ThemeToggle.tsx","services/devices.service.ts","logic/common/profileUtils.ts","logic/common/settingsUtils.ts","components/dashboard/SideBarBottom.tsx","components/dashboard/ProfileAvatar.tsx","components/dashboard/ToolBarControls.tsx","components/dashboard/PageToolbarExtender.tsx","components/dashboard/PageToolbar.tsx","pages/Dashboard.tsx","components/toolbars/MinionsToolbar.tsx","components/toolbars/NetworkToolbar.tsx","components/toolbars/UsersToolbar.tsx"],"names":["wrapAllMethods","target","interceptor","methodsToWrap","methodName","functions","Proxy","wrapObjectMethods","obj","properties","Set","currentObj","i","Object","getOwnPropertyNames","map","item","add","getPrototypeOf","keys","filter","getObjectMethods","createApiProxy","apiObject","stdInterceptor","apply","thisArg","argArray","objName","constructor","name","console","log","status","sessionManager","onLogout","envFacade","platform","window","location","href","baseDashboardUri","AppRoutes","login","path","reload","statusText","message","ApiFacade","AuthenticationApi","apiKey","getToken","DefaultApi","DevicesApi","FeedsApi","IftttApi","MinionsApi","OperationsApi","RFApi","RemoteApi","TimingsApi","UsersApi","VersionApi","ThemeTooltip","props","useState","open","setOpen","hideTip","children","isTouchScreenDevice","style","display","onMouseEnter","onMouseLeave","onClick","disableHoverListener","disableFocusListener","getModeColor","isOn","theme","palette","grey","type","marginLeft","direction","marginRight","left","inputColor","isTokenAllowed","getLocalStorageItem","LocalStorageKey","ApiToken","itemType","token","setLocalStorageItem","profile","Profile","removeLocalStorageItem","DataService","resetAppData","scope","AuthScopes","AdminAuth","UserAuth","sleep","duration","a","Promise","res","setTimeout","Milliseconds","isValidUrl","string","url","protocol","URL","_","navigator","maxTouchPoints","copyToClipboard","text","clipboard","writeText","textField","document","createElement","innerText","body","appendChild","select","execCommand","remove","downloadBinaryFile","buffer","fileName","blob","Blob","createObjectURL","anchorElem","download","click","removeChild","revokeObjectURL","getIpLastPartNum","ip","lastPart","split","parseInt","compareIpByDevicePart","ipA","ipB","_serverUrl","ServerURL","process","REACT_APP_API_URL","_baseDashboardUri","hostname","port","_v3DashboardUri","REACT_APP_V3_URL","_lightweightUrl","REACT_APP_LIGHTWEIGHT_URL","this","allowSetApiServiceURL","serverUrl","REACT_APP_MOCK_MODE","REACT_APP_LOCAL_DEV","isMobileApp","devMode","mockMode","globalThis","device","_data","dataFeed","SyncEvent","fetchFlag","dataServicesInstances","push","forceFetchData","fetchData","dataResponse","post","callback","detacher","attach","data","clonedData","clonedeep","undefined","reset","usersService","getUsers","remoteRegisteredUsersService","getRegisteredUsers","profileService","getProfile","minionsService","minionsServerFeed","minionFeedEvent","minionFeed","JSON","parse","event","FeedEvent","Update","updateMinion","minion","Created","createMinion","Removed","deleteMinion","minionIndex","findIndex","m","minionId","postNewData","splice","minionsFetchFunc","getMinions","close","EventSource","apiUrl","API_KEY_HEADER","withCredentials","onmessage","onMinionFeedUpdate","error","useData","dataService","defaultValue","options","setData","loading","setLoading","useEffect","dataDetacher","attachDataSubs","skipErrorToastOnFailure","handleServerRestError","ACModeOptions","CalibrationMode","CleanerMode","DaysOptions","FanStrengthOptions","MinionTypes","ProgressStatus","RemoteConnectionStatus","RollerDirection","SunTriggerOptions","SwitchOptions","TimingTypes","isomorphicFetch","fetch","BaseAPI","configuration","basePath","RequiredError","field","msg","Error","AuthenticationApiFetchParamCreator","localVarPath","localVarUrlObj","localVarRequestOptions","assign","method","localVarHeaderParameter","localVarQueryParameter","query","search","credentials","headers","needsSerialization","stringify","loginTfa","logout","localVarApiKeyValue","logoutSessions","userId","replace","encodeURIComponent","String","AuthenticationApiFp","localVarFetchArgs","then","response","DefaultApiFetchParamCreator","getLastLogs","getSettingsBackup","DefaultApiFp","DevicesApiFetchParamCreator","getDevices","getDevicesKinds","rescanDevices","setDeviceName","deviceMac","DevicesApiFp","json","FeedsApiFetchParamCreator","getMinionsFeed","getTimingFeed","FeedsApiFp","IftttApiFetchParamCreator","isIftttEnabled","setIftttIntegrationSettings","triggeredMinionAction","triggeredOperationAction","operationId","triggeredSomeAction","IftttApiFp","MinionsApiFetchParamCreator","getMinion","getMinionsTimeline","getSescaningMinionsStatus","notifyMinionStatusChanged","powerAllOff","renameMinion","renameRoom","rescanMinionStatus","rescanMinionsStatus","scanNetwork","setMinion","setMinionCalibrate","setMinionTimeout","MinionsApiFp","OperationsApiFetchParamCreator","createOperation","deleteOperation","getOperation","getOperations","setOperation","triggerOperation","OperationsApiFp","RFApiFetchParamCreator","fetchDeviceCommandsToMinion","generateMinionCommand","getCommandsRepoAvailableDevices","recordMinionCommand","RFApiFp","RemoteApiFetchParamCreator","getConnectionStatus","getMachineMac","getRemoteHost","removeRemoteSettings","setRemoteSettings","RemoteApiFp","TimingsApiFetchParamCreator","createTiming","deleteTiming","timingId","getTiming","getTimings","setTiming","TimingsApiFp","UsersApiFetchParamCreator","createUser","deleteUser","getUser","removeUserForwarding","requestUserForwarding","requestUserForwardingAuth","setUser","UsersApiFp","VersionApiFetchParamCreator","getCurrentVersion","getUpdateStatus","isLatestVersion","updateVersion","VersionApiFp","useLiveliness","livelinessFlag","liveliness","setLiveliness","livelinessDetacher","livelinessFeed","remoteURLService","versionDataService","versionLatestService","online","remoteConnection","NotConfigured","livelinessCheck","remoteConnectionStatus","isLoggedOn","LIVELINESS_ACK_INTERVAL","livelinessAck","ThemeToggle","t","useTranslation","title","enterDelay","setDarkMode","color","fontSize","devicesService","extractProfileAvatarText","displayName","trim","p","toUpperCase","slice","join","remoteConnectionDisplayKey","ConnectionOK","LocalServerDisconnected","CantReachRemoteServer","AuthorizationFail","SideBarBottom","time","setTime","intervalHandler","setInterval","Date","toLocaleTimeString","clearInterval","ProfileAvatar","history","useHistory","anchorEl","setAnchorEl","avatarLetters","setAvatarLetters","className","IconButton","currentTarget","Avatar","Menu","id","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","Boolean","onClose","MenuItem","DashboardRoutes","ListItemIcon","Typography","variant","Divider","catch","useStyles","makeStyles","badge","background","default","ToolBarControls","classes","newVersion","passwordChangeRequired","setPasswordChangeRequired","setPasswordRequiredDetacher","cachedProfile","Grid","container","justifyContent","alignItems","Badge","overlap","settings","PageToolbarExtender","useTheme","ToggleToolbarIcon","collapsePageToolbar","ArrowDropDownIcon","ArrowDropUpIcon","toggleToolBar","backgroundColor","paper","height","width","marginTop","ToolbarDivider","useMediaQuery","breakpoints","up","orientation","flexItem","margin","DEFAULT_FONT_RATION","PageToolbarButton","wideDesktopMode","succeed","setSucceed","disabled","Icon","tip","runAction","DEFAULT_SUCCEED_ICON_SHOWN","IconToShow","DoneIcon","LoadingButton","loadingPosition","startIcon","opacity","PageToolbarContainer","marginBottom","Paper","Minions","React","lazy","Network","Users","Settings","getLang","LeftArrowIcon","ArrowBackIosIcon","ArrowForwardIosIcon","RightArrowIcon","appBarHight","sideBarTab","minWidth","minHeight","sideBarTabIndicator","dashboardPages","icon","nameKey","minions","route","param","components","supportedSearch","toolbar","refreshing","setRefreshing","rereading","setRereading","rescanning","setRescanning","CREATE_MINION_PATH","rescanMinions","scanNetworkFirst","updateStatus","InProgress","currentStatus","scanningStatus","Duration","FromSeconds","Fail","postApiError","responseCode","padding","AddIcon","RefreshIcon","FindReplaceIcon","TrackChangesIcon","network","users","CREATE_USER_PATH","adminOnly","Dashboard","desktopMode","useLocation","CollapseMenu","collapseMenu","setCollapseMenu","CollapseAppToolbar","collapseToolbar","setCollapseToolbar","CollapsePageToolbar","setCollapsePageToolbar","searchText","setSearchText","toggleCollapsePageToolbar","newCollapsePageToolbar","onTabSelected","newValue","warn","tabIndex","d","pathname","includes","dashboardCssVars","sideMenuWidth","routerContainerWidth","routerContainerHight","dashboardPage","find","startsWith","accessPageForbidden","isAdmin","showPageToolbar","AppBar","position","Toolbar","edge","alt","src","casanetLogo","InputBase","zIndex","sx","ml","flex","placeholder","pageName","toLowerCase","value","onChange","e","inputProps","newCollapseToolbar","Collapse","in","Box","flexGrow","newCollapseMenuMode","Tabs","scrollButtons","indicatorColor","textColor","indicator","Tab","label","maxWidth","maxHeight","fallback","Loader","exact","dashboard","to"],"mappings":"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","file":"static/js/10.657cca2e.chunk.js","sourcesContent":["import { AppRoutes } from './consts';\nimport { envFacade } from './env-facade';\nimport { sessionManager } from './session-manager';\n\n/**\n * Gets a generic ProxyHandler who's purpose is to intercept object methods.\n *\n * @template T The type of object being proxied\n * @return {*}  {ProxyHandler<T>}\n */\nfunction getGenericFunctionInterceptor<T extends () => void>(): ProxyHandler<T> {\n\tconst handler: ProxyHandler<T> = {\n\t\tasync apply(target: T, thisArg: unknown, argArray: []) {\n\t\t\tconst objName = Object.getPrototypeOf(thisArg)?.constructor?.name || 'N/A';\n\t\t\ttry {\n\t\t\t\tconsole.log(`[${objName}.${target.name}] Invoking ${target.name}`);\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/return-await\n\t\t\t\treturn await target.apply(thisArg, argArray);\n\t\t\t} catch (e: any) {\n\t\t\t\tif (e?.status === 401) {\n\t\t\t\t\tconsole.log(`[${objName}.${target.name}] User unauthorized, deleting profile & reloading to login page`);\n\t\t\t\t\tsessionManager.onLogout();\n\n\t\t\t\t\tif (envFacade.platform === 'Browser') {\n\t\t\t\t\t\twindow.location.href = `${envFacade.baseDashboardUri}/#${AppRoutes.login.path}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Cordova WebView redirect not effecting the page, have to reload for it\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconsole.log(`[${objName}.${target.name}] Exception intercepted- ${e?.statusText || e?.message || e}`);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t};\n\treturn handler;\n}\n\n/**\n * Gets an array of an ApiObject's functions.\n * @description Context sensitive- function dives relies on the API objects being shallow.\n * Can be upgraded, if necessary, to recurse until the BaseAPI prototype is encountered\n *\n * @param {object} obj The API object to get the methods of\n * @return {*}  {string[]}\n */\nfunction getObjectMethods(obj: unknown): string[] {\n\tconst properties = new Set<string>();\n\tlet currentObj = obj;\n\tfor (let i = 0; i < 2; i++) {\n\t\tObject.getOwnPropertyNames(currentObj).map((item) => properties.add(item));\n\t\tcurrentObj = Object.getPrototypeOf(currentObj);\n\t}\n\n\t// Filter all props and return only relevant functions\n\treturn [...properties.keys()].filter((item) => {\n\t\tconst propType = typeof (obj as Record<string, unknown>)[item];\n\t\treturn propType === 'function' && item !== 'fetch' && item !== 'constructor';\n\t});\n}\n\nexport function wrapObjectMethods<T>(target: T, interceptor: ProxyHandler<() => void>, methodsToWrap: (keyof T)[]): T {\n\tfor (const methodName of methodsToWrap) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tconst functions = target as any;\n\t\t// eslint-disable-next-line no-param-reassign\n\t\tfunctions[methodName] = new Proxy(functions[methodName], interceptor as unknown as T);\n\t}\n\treturn target;\n}\n\n/**\n * Wraps the given object's methods with a generic interceptor\n *\n * @param {*} target The object who's methods are to be wrapped\n * @return {*} The given 'target' object, who's function's have been wrapped with a generic interceptor\n */\nexport function wrapAllMethods<T>(target: T, interceptor: ProxyHandler<() => void>): T {\n\tconst methods = getObjectMethods(target);\n\treturn wrapObjectMethods(target, interceptor, methods as (keyof T)[]);\n}\n\n/**\n * Wraps the given API with a dynamic, method intercepting proxy\n *\n * @export\n * @template TApi A Swagger-generated API object type\n * @param {TApi} apiObject An API object instance to wrap\n * @return {*} The given 'apiObject' wrapped with a dynamic proxy\n */\nexport function createApiProxy<TApi>(apiObject: TApi): TApi {\n\tconst stdInterceptor: ProxyHandler<() => unknown> = getGenericFunctionInterceptor();\n\treturn new Proxy(\n\t\twrapAllMethods(apiObject, stdInterceptor) as unknown as Record<string, unknown>,\n\t\tstdInterceptor as unknown as ProxyHandler<Record<string, unknown>>\n\t) as unknown as TApi;\n}\n","\n// This file was AutoGenerated at Tue Nov 02 2021 12:39:26 GMT+0000 (Coordinated Universal Time) by 'generate-api.js'\n\nimport { createApiProxy } from '../../api-proxy-core';\nimport { sessionManager } from '../../session-manager';\nimport { AuthenticationApi, DefaultApi, DevicesApi, FeedsApi, IftttApi, MinionsApi, OperationsApi, RFApi, RemoteApi, TimingsApi, UsersApi, VersionApi } from '../api/api'\n\nexport class ApiFacade {\n\tpublic static get AuthenticationApi(): AuthenticationApi {\n\t\treturn createApiProxy(new AuthenticationApi({ apiKey: sessionManager.getToken() }));\n\t}\n\n\tpublic static get DefaultApi(): DefaultApi {\n\t\treturn createApiProxy(new DefaultApi({ apiKey: sessionManager.getToken() }));\n\t}\n\n\tpublic static get DevicesApi(): DevicesApi {\n\t\treturn createApiProxy(new DevicesApi({ apiKey: sessionManager.getToken() }));\n\t}\n\n\tpublic static get FeedsApi(): FeedsApi {\n\t\treturn createApiProxy(new FeedsApi({ apiKey: sessionManager.getToken() }));\n\t}\n\n\tpublic static get IftttApi(): IftttApi {\n\t\treturn createApiProxy(new IftttApi({ apiKey: sessionManager.getToken() }));\n\t}\n\n\tpublic static get MinionsApi(): MinionsApi {\n\t\treturn createApiProxy(new MinionsApi({ apiKey: sessionManager.getToken() }));\n\t}\n\n\tpublic static get OperationsApi(): OperationsApi {\n\t\treturn createApiProxy(new OperationsApi({ apiKey: sessionManager.getToken() }));\n\t}\n\n\tpublic static get RFApi(): RFApi {\n\t\treturn createApiProxy(new RFApi({ apiKey: sessionManager.getToken() }));\n\t}\n\n\tpublic static get RemoteApi(): RemoteApi {\n\t\treturn createApiProxy(new RemoteApi({ apiKey: sessionManager.getToken() }));\n\t}\n\n\tpublic static get TimingsApi(): TimingsApi {\n\t\treturn createApiProxy(new TimingsApi({ apiKey: sessionManager.getToken() }));\n\t}\n\n\tpublic static get UsersApi(): UsersApi {\n\t\treturn createApiProxy(new UsersApi({ apiKey: sessionManager.getToken() }));\n\t}\n\n\tpublic static get VersionApi(): VersionApi {\n\t\treturn createApiProxy(new VersionApi({ apiKey: sessionManager.getToken() }));\n\t}\n\n}\n","import Tooltip, { TooltipProps } from \"@mui/material/Tooltip\";\nimport { useState } from \"react\";\nimport { isTouchScreenDevice } from \"../../infrastructure/utils\";\n\ninterface ThemeTooltipProps extends TooltipProps {\n\t/** Hide tip */\n\thideTip?: boolean;\n}\n\n/**\n * MUI Tooltip with adaption to the move away once focuses left.\n * See https://stackoverflow.com/questions/60751964/react-material-uihow-to-disable-tooltip-after-click-it\n */\nexport function ThemeTooltip(props: ThemeTooltipProps) {\n\tconst [open, setOpen] = useState<boolean>(false);\n\n\tif (props.hideTip) {\n\t\treturn props.children;\n\t}\n\n\t// In touch devices, just use the original behavior.\n\tif (isTouchScreenDevice()) {\n\t\treturn <div style={{ display: 'flex' }}><Tooltip {...props} /></div>;\n\t}\n\treturn <div\n\t\tstyle={{ display: 'flex' }}\n\t\tonMouseEnter={() => setOpen(true)}\n\t\tonMouseLeave={() => setOpen(false)}\n\t\tonClick={() => setOpen(false)}\n\t>\n\t\t{/* Show the original MUI Tooltip with all props. */}\n\t\t{/* Just override the open attribute to be fully managed, and disable internal listeners */}\n\t\t<Tooltip {...props} open={open} disableHoverListener disableFocusListener />\n\t</div>;\n}\n","import { Theme } from \"@material-ui/core\";\n\n/** Calc color for mode indicators (such as icons, brightness indicators etc..), based on status and theme */\nexport function getModeColor(isOn: boolean, theme: Theme) {\n\treturn isOn ? 'inherit' : theme.palette.grey[theme.palette.type === 'light' ? 400 : 600];\n}\n\ntype marginSide = 'marginLeft' | 'marginRight';\n\n/** marginLeft real key consider LTR vs RTL */\nexport function marginLeft(theme: Theme): marginSide {\n\treturn theme.direction === \"ltr\" ? 'marginLeft' : 'marginRight';\n}\n\n/** marginRight real key consider LTR vs RTL */\nexport function marginRight(theme: Theme): marginSide {\n\treturn theme.direction === \"ltr\" ? 'marginRight' : 'marginLeft';\n}\n\ntype side = 'left' | 'right';\n\n/** marginLeft real key consider LTR vs RTL */\nexport function left(theme: Theme): side {\n\treturn theme.direction === \"ltr\" ? 'left' : 'right';\n}\n\n/** marginRight real key consider LTR vs RTL */\nexport function right(theme: Theme): side {\n\treturn theme.direction === \"ltr\" ? 'right' : 'left';\n}\n\n/** The new MUI input text color */\nexport function inputColor(theme: Theme) {\n\treturn theme.palette.grey[900];\n}\n","import { DataService } from './data-service-base';\nimport { envFacade } from './env-facade';\nimport { AuthScopes, User } from './generated/api';\nimport { getLocalStorageItem, LocalStorageKey, removeLocalStorageItem, setLocalStorageItem } from './local-storage';\n\nclass SessionManager {\n\tpublic getToken(): string {\n\t\tif (envFacade.isTokenAllowed) {\n\t\t\treturn getLocalStorageItem<string>(LocalStorageKey.ApiToken, { itemType: 'string' }) || '';\n\t\t}\n\t\treturn '';\n\t}\n\n\tpublic setToken(token: string) {\n\t\tif (envFacade.isTokenAllowed) {\n\t\t\tsetLocalStorageItem<string>(LocalStorageKey.ApiToken, token, { itemType: 'string' });\n\t\t}\n\t}\n\n\tpublic onLogin(profile: User) {\n\t\tsetLocalStorageItem<User>(LocalStorageKey.Profile, profile, { itemType: 'object' });\n\t}\n\n\tpublic onLogout() {\n\t\tremoveLocalStorageItem(LocalStorageKey.Profile);\n\t\tremoveLocalStorageItem(LocalStorageKey.ApiToken);\n\t\tDataService.resetAppData();\n\t}\n\n\tpublic get isLoggedOn(): boolean {\n\t\treturn !!getLocalStorageItem(LocalStorageKey.Profile, { itemType: 'object' }) &&\n\t\t\t(!envFacade.isTokenAllowed || !!getLocalStorageItem(LocalStorageKey.ApiToken, { itemType: 'string' }));\n\t}\n\n\t/** \n\t * Detect whenever current session is an admin one.\n\t * (P.S. this is not a real check with the BE, only and *only* for UI purpose)\n\t */\n\tpublic get isAdmin(): boolean { \n\t\treturn (getLocalStorageItem<User>(LocalStorageKey.Profile, { itemType: 'object' }))?.scope === AuthScopes.AdminAuth;\n\t}\n\n\t/**\n\t * Current user session scope\n\t * (P.S. this is not a real check with the BE, only and *only* for UI purpose)\n\t */\n\tpublic get scope(): AuthScopes { \n\t\treturn (getLocalStorageItem<User>(LocalStorageKey.Profile, { itemType: 'object' }))?.scope || AuthScopes.UserAuth;\n\t}\n}\n\nexport const sessionManager = new SessionManager();\n","import { Duration } from 'unitsnet-js';\n\n/**\n * Sleep for a given duration time, this will not block the NODD's event loop\n * @param duration The time to sleep\n */\nexport async function sleep(duration: Duration): Promise<void> {\n\treturn new Promise<void>((res) => {\n\t\tsetTimeout(() => {\n\t\t\tres();\n\t\t}, duration.Milliseconds);\n\t});\n}\n\n/**\n * Check string if it's a valid URL\n * @param string The string to check\n * @param protocol The protocol to validate (http as default)\n * @returns True if it's a valid one\n */\nexport function isValidUrl(string: string, protocol: string = 'http'): boolean {\n\tlet url;\n\ttry {\n\t\turl = new URL(string);\n\t} catch (_) {\n\t\treturn false;\n\t}\n\n\treturn url.protocol === `${protocol}:` || url.protocol === `${protocol}s:`;\n}\n\n/**\n * Detect touch screens devices\n * @returns True whenever the device is with touch screen\n */\nexport function isTouchScreenDevice() {\n\treturn 'ontouchstart' in window || navigator.maxTouchPoints;\n};\n\n/**\n * Copy a text to the user's clipboard\n * @param text The text to copy\n */\nexport function copyToClipboard(text: string) {\n\t// If writeText API supported, use it\n\tif (!!navigator?.clipboard?.writeText) {\n\t\tnavigator.clipboard.writeText(text);\n\t\treturn;\n\t}\n\n\t// Else create textarea element on the DOM and use it to copy\n\tconst textField = document.createElement('textarea')\n\ttextField.innerText = text;\n\tdocument.body.appendChild(textField);\n\ttextField.select();\n\tdocument.execCommand('copy');\n\ttextField.remove();\n}\n\n/**\n * Download binary content \n * @param buffer The file content\n * @param fileName The name for the downloaded file\n */\nexport function downloadBinaryFile(buffer: Buffer | ArrayBuffer, fileName: string) {\n\t// Create a blob of the file\n\tconst blob = new Blob([buffer], { type: 'application/octet-stream' });\n\t// Create \"URL\" with the blob as content\n\tconst url = window.URL.createObjectURL(blob);\n\t// Create link element and point it to the \"URL\" with the blob\n\tconst anchorElem = document.createElement(\"a\");\n\tanchorElem.href = url;\n\tanchorElem.download = fileName;\n\t// Add the link to the DOM \n\tdocument.body.appendChild(anchorElem);\n\t// Simulate the click\n\tanchorElem.click();\n\t// Remove it from the DOM\n\tdocument.body.removeChild(anchorElem);\n\t// On Edge, revokeObjectURL should be called only after\n\t// a.click() has completed, atleast on EdgeHTML 15.15048\n\tsetTimeout(function () {\n\t\twindow.URL.revokeObjectURL(url);\n\t}, 1000);\n}\n\n/**\n * Get the 'device' number part (the last one) in the local network IP structure\n * @param ip The IP address\n * @returns The number\n */\nfunction getIpLastPartNum(ip: string): number {\n\tconst lastPart = ip.split('.')[3];\n\treturn parseInt(lastPart);\n}\n\n/**\n * Compare IPs by the last (devices address number) IP part\n * @param ipA The first IP\n * @param ipB THe second to compare with\n * @returns 1 of the first is higher, else -1.\n */\nexport function compareIpByDevicePart(ipA: string, ipB: string) {\n\tconst ipALastPart = getIpLastPartNum(ipA);\n\tconst ipBLastPart = getIpLastPartNum(ipB);\n\treturn ipALastPart > ipBLastPart ? 1 : -1;\n}\n","import { getLocalStorageItem, LocalStorageKey, setLocalStorageItem } from \"./local-storage\";\nimport { Platform } from \"./symbols/global\";\n\nclass EnvFacade {\n\n\t/** The local server API URL */\n\tprivate _serverUrl = getLocalStorageItem<string>(LocalStorageKey.ServerURL, { itemType: 'string' }) || process.env.REACT_APP_API_URL || '';\n\n\t/** The current dashboard URI */\n\tprivate _baseDashboardUri: string = `${window.location.protocol}//${window.location.hostname}${window.location.port ? `:${window.location.port}` : ''}`;\n\n\t/** The V3 dashboard path, see https://github.com/casanet/frontend-v3 */\n\tprivate _v3DashboardUri: string = process.env.REACT_APP_V3_URL || `/v3`;\n\n\t/** The lightweight dashboard path, see https://github.com/casanet/lightweight-dashboard */\n\tprivate _lightweightUrl: string = process.env.REACT_APP_LIGHTWEIGHT_URL || `/light-app/index.html`;\n\n\tpublic get apiServerUrl(): string {\n\t\t// Use 'this._serverUrl' only edit URL is allowed \n\t\tif (this.allowSetApiServiceURL) {\n\t\t\treturn this._serverUrl;\n\t\t}\n\t\treturn process.env.REACT_APP_API_URL || '';\n\t}\n\n\tpublic set apiServerUrl(serverUrl: string) {\n\t\t// Keep the server URL in mobile apps for farther use\n\t\tsetLocalStorageItem<string>(LocalStorageKey.ServerURL, serverUrl, { itemType: 'string' });\n\t\tthis._serverUrl = serverUrl;\n\t}\n\n\tpublic get apiUrl(): string {\n\t\treturn `${this._serverUrl}/API`;\n\t}\n\n\tpublic get baseDashboardUri(): string {\n\t\treturn this._baseDashboardUri;\n\t}\n\n\tpublic get v3DashboardUri(): string {\n\t\treturn this._v3DashboardUri;\n\t}\n\n\tpublic get lightweightUrl(): string {\n\t\treturn this._lightweightUrl;\n\t}\n\n\t/** Is app running under MOCK MODE */\n\tpublic get mockMode(): boolean {\n\t\treturn !!process.env.REACT_APP_MOCK_MODE;\n\t}\n\n\t/** Is app running under DEV MODE */\n\tpublic get devMode(): boolean {\n\t\treturn !!process.env.REACT_APP_LOCAL_DEV;\n\t}\n\n\tpublic get allowSetApiServiceURL(): boolean {\n\t\t// In prod mode, only in mobile user can modify the server API URL no matter what..\n\t\t// THIS IS FOR SECURITY!!!!, NO XSS CODE WILL BE ALLOW TO CHANGE THE API URL!!!!\n\t\treturn this.isMobileApp || this.devMode;\n\t}\n\n\tpublic get isTokenAllowed(): boolean {\n\t\t// For android app, since it's not same-origin the cookie not will be saved by web-kit for http requests\n\t\t// Also, the risk for XSS thieves is very low, since it's not a browser, but app with web render \n\t\treturn this.isMobileApp || this.devMode || this.mockMode;\n\t}\n\n\tpublic get platform(): Platform {\n\t\treturn globalThis.device.platform as Platform;\n\t}\n\n\tpublic get isMobileApp(): boolean {\n\t\treturn this.platform !== 'Browser';\n\t}\n}\n\nexport const envFacade = new EnvFacade();\n","import { SyncEvent } from 'ts-events';\nimport clonedeep from 'lodash.clonedeep';\n\n/** Implementation of base class for common data fetch and publish as event logic */\nexport abstract class DataService<T> {\n\n\t/**\n\t\t * Collection of all services instances, used to allow forcing reset refetch and so on for all app data\n\t\t */\n\tprivate static dataServicesInstances: DataService<any>[] = [];\n\n\t/** The data */\n\tprotected _data: T;\n\n\t/** The data event publisher event */\n\tprivate dataFeed = new SyncEvent<T>();\n\n\t/** The lag to detect whenever the data already fetched from the API */\n\tpublic fetchFlag = false;\n\n\tconstructor() {\n\t\t// Once services created, add it to the services collection\n\t\tDataService.dataServicesInstances.push(this);\n\t}\n\n\t/** Get service data AS IS (without triggering anything :) */\n\tpublic get data(): T {\n\t\treturn this._data;\n\t}\n\n\t/** The child required to implement this function, to fetch the data from the API or any other resource */\n\tabstract fetchData(): Promise<T>;\n\n\t/** Get the date, if it's not fetched yet it will be fetch */\n\tpublic async getData(): Promise<T> {\n\t\tif (this.fetchFlag) {\n\t\t\treturn this._data;\n\t\t}\n\t\treturn await this.forceFetchData();\n\t}\n\n\t/**\n\t * Force data hard refresh \n\t * @returns THe new data\n\t */\n\tpublic async forceFetchData(): Promise<T> {\n\t\ttry {\n\t\t\t// Fetch the data\n\t\t\tconst dataResponse = await this.fetchData();\n\t\t\t// Mark the flag as fetched\n\t\t\tthis.fetchFlag = true;\n\t\t\t// Keep the data\n\t\t\tthis._data = dataResponse;\n\t\t\t// Publish the new data to the subscribers\n\t\t\tthis.dataFeed.post(dataResponse);\n\t\t\treturn dataResponse;\n\t\t} catch (error) {\n\t\t\t// TODO:LOG\n\n\t\t\t// Mark flag as false for next time\n\t\t\tthis.fetchFlag = false;\n\n\t\t\tthrow error;\n\t\t}\n\n\t}\n\n\t/**\n\t * Add subscriber to the data feed\n\t * @param callback The function to call when a new data will published\n\t * @returns The unsubscribe callback for detacher\n\t */\n\tpublic async attachDataSubs(callback: (data: T) => void): Promise<() => void> {\n\t\t// Add the callback to the feed event\n\t\tconst detacher = this.dataFeed.attach(callback);\n\t\t// Data has been never fetched, do it now, else, just post again the data for the new subscriber\n\t\tif (!this.fetchFlag) {\n\t\t\tawait this.forceFetchData();\n\t\t} else {\n\t\t\tthis.dataFeed.post(this._data);\n\t\t}\n\t\treturn detacher;\n\t}\n\n\t/**\n\t * Publish and update a new data  \n\t * @param data The new data\n\t */\n\tpublic postNewData(data: T) {\n\t\t// First clone the object, to avoid issues in the react state when the object is the same prototype instance\n\t\t// and to make sure the changes will do affect any component state\n\t\tconst clonedData = clonedeep(data);\n\t\t// Update and publish the new data\n\t\tthis._data = clonedData;\n\t\tthis.dataFeed.post(clonedData);\n\t}\n\n\t/**\n\t * Reset data and state\n\t */\n\tpublic reset() {\n\t\tthis._data = undefined as unknown as T;\n\t\tthis.fetchFlag = false;\n\t}\n\n\t/**\n\t * Reset all data services\n\t */\n\tpublic static resetAppData() {\n\t\tfor (const dataServiceInstance of DataService.dataServicesInstances) {\n\t\t\tdataServiceInstance.reset();\n\t\t}\n\t}\n}\n","import { User } from \"../infrastructure/generated/api\";\nimport { ApiFacade } from \"../infrastructure/generated/proxies/api-proxies\";\nimport { DataService } from \"../infrastructure/data-service-base\";\nimport { LocalStorageKey, setLocalStorageItem } from \"../infrastructure/local-storage\";\n\nclass UsersService extends DataService<User[]> {\n\tfetchData(): Promise<User[]> {\n\t\treturn ApiFacade.UsersApi.getUsers();\n\t}\n}\nexport const usersService = new UsersService();\n\nclass RemoteRegisteredUsersService extends DataService<string[]> {\n\tfetchData(): Promise<string[]> {\n\t\treturn ApiFacade.UsersApi.getRegisteredUsers();\n\t}\n}\nexport const remoteRegisteredUsersService = new RemoteRegisteredUsersService();\n\nclass ProfileService extends DataService<User> {\n\tasync fetchData(): Promise<User> {\n\t\tconst profile = await ApiFacade.UsersApi.getProfile();\n\t\t// Make sure the local storage is up to date on each time the profile fetched from any reason\n\t\tsetLocalStorageItem<User>(LocalStorageKey.Profile, profile, { itemType: 'object' });\n\t\treturn profile;\n\t}\n}\nexport const profileService = new ProfileService();\n","import { FeedEvent, Minion, MinionFeed } from \"../infrastructure/generated/api\";\nimport { ApiFacade } from \"../infrastructure/generated/proxies/api-proxies\";\nimport { DataService } from \"../infrastructure/data-service-base\";\nimport { envFacade } from \"../infrastructure/env-facade\";\nimport { sessionManager } from \"../infrastructure/session-manager\";\nimport { API_KEY_HEADER } from \"../infrastructure/consts\";\n\n// Inherited from DataService\nclass MinionsService extends DataService<Minion[]> {\n\n\t// The minion SSE feed object\n\tminionsServerFeed: EventSource;\n\n\tprivate onMinionFeedUpdate(minionFeedEvent: MessageEvent) {\n\t\t// Ignore the init message\n\t\tif (minionFeedEvent.data === '\"init\"') {\n\t\t\treturn;\n\t\t}\n\n\t\t// Handle the incoming message\n\t\tconst minionFeed: MinionFeed = JSON.parse(minionFeedEvent.data);\n\n\t\t// Update the minion collection with the change\n\t\tswitch (minionFeed.event) {\n\t\t\tcase FeedEvent.Update: {\n\t\t\t\tthis.updateMinion(minionFeed.minion);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase FeedEvent.Created: {\n\t\t\t\tthis.createMinion(minionFeed.minion);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase FeedEvent.Removed: {\n\t\t\t\tthis.deleteMinion(minionFeed.minion);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic updateMinion(minion: Minion) {\n\t\tconst minionIndex = this._data.findIndex(m => m.minionId === minion.minionId);\n\t\tif (minionIndex !== -1) {\n\t\t\tthis._data[minionIndex] = minion;\n\t\t}\n\t\t// Publish the update\n\t\tthis.postNewData(this._data);\n\t}\n\n\tpublic createMinion(minion: Minion) {\n\t\tthis._data.push(minion);\n\t\t// Publish the update\n\t\tthis.postNewData(this._data);\n\t}\n\n\tpublic deleteMinion(minion: Minion) {\n\t\tconst minionIndex = this._data.findIndex(m => m.minionId === minion.minionId);\n\n\t\tif (minionIndex !== -1) {\n\t\t\tthis._data.splice(minionIndex, 1);\n\t\t}\n\t\t// Publish the update\n\t\tthis.postNewData(this._data);\n\t}\n\n\tfetchData(): Promise<Minion[]> {\n\t\t// Get the fetch data function (without activating it yet)\n\t\tconst minionsFetchFunc = ApiFacade.MinionsApi.getMinions();\n\n\t\ttry {\n\t\t\t// Restart SSE feed\n\t\t\tif (this.minionsServerFeed) {\n\t\t\t\tthis.minionsServerFeed.close();\n\t\t\t}\n\n\t\t\t// Open SSE connection\n\t\t\tthis.minionsServerFeed = new EventSource(`${envFacade.apiUrl}/feed/minions?${API_KEY_HEADER}=${sessionManager.getToken()}`, {\n\t\t\t\twithCredentials: true,\n\t\t\t});\n\n\t\t\t// Subscribe to updated\n\t\t\tthis.minionsServerFeed.onmessage = (minionFeedEvent: MessageEvent) => {\n\t\t\t\tthis.onMinionFeedUpdate(minionFeedEvent);\n\t\t\t};\n\t\t} catch (error) {\n\t\t\t// TODO:LOG\n\t\t}\t\n\n\t\t// TODO: on close/error?\n\n\t\treturn minionsFetchFunc;\n\t}\n}\n\nexport const minionsService = new MinionsService();","import { useEffect, useState } from 'react';\nimport { DataService } from \"../infrastructure/data-service-base\";\nimport { handleServerRestError } from '../services/notifications.service';\n\nexport interface DataHookOptions {\n\t/** Don't show toast message on data fetch failure */\n\tskipErrorToastOnFailure?: boolean;\n}\n\n/**\n * Data hook, used to get the latest data and rerender in case of data update and also give the fetching mode.\n * Under the hood it's subscribe to the service data on mount and unsubscribe on unmount. \n * @param dataService The data service to get. \n * @param defaultValue An default value to get before the data arrived from server.\n * @param options The hook options\n * @returns A a tuple of data and the loading mode, as [data, loading].\n */\nexport function useData<T>(dataService: DataService<T>, defaultValue?: T, options: DataHookOptions = {}): [T, boolean] {\n\t// The data state, init with default value of not fetched yet\n\tconst [data, setData] = useState(!dataService.fetchFlag && defaultValue ? defaultValue : dataService.data);\n\t// The loading state\n\tconst [loading, setLoading] = useState<boolean>(true);\n\n\tuseEffect(() => {\n\t\tlet dataDetacher: () => void;\n\t\t// Mark as \"loading\"\n\t\tsetLoading(true);\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\t// Subscribe to the data\n\t\t\t\tdataDetacher = await dataService.attachDataSubs(setData);\n\t\t\t} catch (error) {\n\t\t\t\t// In case of error, show error toast only if it's not turned off\n\t\t\t\tif (!options.skipErrorToastOnFailure) {\n\t\t\t\t\tawait handleServerRestError(error);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Mark \"loading\" OFF\n\t\t\tsetLoading(false);\n\t\t})();\n\n\t\treturn () => {\n\t\t\t// unsubscribe the feed on component unmount\n\t\t\tdataDetacher?.();\n\t\t};\n\t// Run useEffect only once on the component mount\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\t// Return the latest data and loading state \n\treturn [data, loading];\n}\n","/// <reference path=\"./custom.d.ts\" />\n// tslint:disable\n/**\n * casanet-local-server\n * IoT server for local home network - Server side\n *\n * OpenAPI spec version: 2.0.0\n * Contact: haim.kastner@gmail.com\n *\n * NOTE: This file is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the file manually.\n */\n\nimport * as url from \"url\";\nconst isomorphicFetch = fetch;\nimport { Configuration } from \"./configuration\";\n\n// Auto-generated by 'generate-api.js'\nimport { envFacade } from '../../env-facade';\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface FetchAPI\n */\nexport interface FetchAPI {\n    (url: string, init?: any): Promise<Response>;\n}\n\n/**\n *\n * @export\n * @interface FetchArgs\n */\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration;\n\n    constructor(configuration?: Configuration, protected basePath: string = envFacade.apiUrl, protected fetch: FetchAPI = isomorphicFetch) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\"\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n\n/**\n * Valid AC mode.\n * @export\n * @enum {string}\n */\nexport enum ACModeOptions {\n    Hot = <any> 'hot',\n    Cold = <any> 'cold',\n    Dry = <any> 'dry',\n    Auto = <any> 'auto'\n}\n/**\n * An AC status.\n * @export\n * @interface AirConditioning\n */\nexport interface AirConditioning {\n    /**\n     * \n     * @type {SwitchOptions}\n     * @memberof AirConditioning\n     */\n    status: SwitchOptions;\n    /**\n     * Valid AC temperature. (minimum 16° maximum 30°).\n     * @type {number}\n     * @memberof AirConditioning\n     */\n    temperature: number;\n    /**\n     * \n     * @type {ACModeOptions}\n     * @memberof AirConditioning\n     */\n    mode: ACModeOptions;\n    /**\n     * \n     * @type {FanStrengthOptions}\n     * @memberof AirConditioning\n     */\n    fanStrength: FanStrengthOptions;\n}\n/**\n * Scopes of authentication, right know in our system there are only 3 scopes.  admin and user. any API route protect by one of them.\n * @export\n * @enum {string}\n */\nexport enum AuthScopes {\n    AdminAuth = <any> 'adminAuth',\n    UserAuth = <any> 'userAuth',\n    IftttAuth = <any> 'iftttAuth'\n}\n/**\n * \n * @export\n * @enum {string}\n */\nexport enum CalibrationMode {\n    LOCKON = <any> 'LOCK_ON',\n    LOCKOFF = <any> 'LOCK_OFF',\n    SHABBAT = <any> 'SHABBAT',\n    AUTO = <any> 'AUTO'\n}\n/**\n * A Cleaner (robot) status.  Cleaner is a smart robot for cleaning home.\n * @export\n * @interface Cleaner\n */\nexport interface Cleaner {\n    /**\n     * \n     * @type {SwitchOptions}\n     * @memberof Cleaner\n     */\n    status: SwitchOptions;\n    /**\n     * \n     * @type {CleanerMode}\n     * @memberof Cleaner\n     */\n    mode: CleanerMode;\n    /**\n     * \n     * @type {FanStrengthOptions}\n     * @memberof Cleaner\n     */\n    fanSpeed: FanStrengthOptions;\n}\n/**\n * Cleaner mode\n * @export\n * @enum {string}\n */\nexport enum CleanerMode {\n    Dock = <any> 'dock',\n    Clean = <any> 'clean'\n}\n/**\n * A light simple light status.  Used to devices that can change also light color (RGB).\n * @export\n * @interface ColorLight\n */\nexport interface ColorLight {\n    /**\n     * \n     * @type {SwitchOptions}\n     * @memberof ColorLight\n     */\n    status: SwitchOptions;\n    /**\n     * Minimum 1% maximum 100% of light brightness.\n     * @type {number}\n     * @memberof ColorLight\n     */\n    brightness: number;\n    /**\n     * Spectrum is 1% to warm light and 100% to cold light.\n     * @type {number}\n     * @memberof ColorLight\n     */\n    temperature: number;\n    /**\n     * Minimum 0 maximum 255 from red color.  Valid color value. (8 bits number, minimum 0 maximum 255).\n     * @type {number}\n     * @memberof ColorLight\n     */\n    red: number;\n    /**\n     * Minimum 0 maximum 255 from green color.  Valid color value. (8 bits number, minimum 0 maximum 255).\n     * @type {number}\n     * @memberof ColorLight\n     */\n    green: number;\n    /**\n     * Minimum 0 maximum 255 from blue color.  Valid color value. (8 bits number, minimum 0 maximum 255).\n     * @type {number}\n     * @memberof ColorLight\n     */\n    blue: number;\n}\n/**\n * Device in commands repo project. see https://github.com/casanet/rf-commands-repo. API section\n * @export\n * @interface CommandsRepoDevice\n */\nexport interface CommandsRepoDevice {\n    /**\n     * \n     * @type {string}\n     * @memberof CommandsRepoDevice\n     */\n    brand: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CommandsRepoDevice\n     */\n    model: string;\n    /**\n     * \n     * @type {MinionTypes}\n     * @memberof CommandsRepoDevice\n     */\n    category: MinionTypes;\n}\n/**\n * Daily timing based on sun triggers.\n * @export\n * @interface DailySunTrigger\n */\nexport interface DailySunTrigger {\n    /**\n     * Selected days in a week.\n     * @type {Array<DaysOptions>}\n     * @memberof DailySunTrigger\n     */\n    days: Array<DaysOptions>;\n    /**\n     * Minutes from the sun trigger.  can be before or after the sun triggers.  For example, to invoke 40 minutes before sunset set -40 and to invoke 40 minutes after sunset set 40.    NOTE! if the duration is more then minutes available in the day from the sun trigger time, the timing will not activate.  for example if the sunset is in 18:00 and the duration set to 7*60 minutes,  the activate time is not on the same day, so it will not activate at all.\n     * @type {number}\n     * @memberof DailySunTrigger\n     */\n    durationMinutes: number;\n    /**\n     * \n     * @type {SunTriggerOptions}\n     * @memberof DailySunTrigger\n     */\n    sunTrigger: SunTriggerOptions;\n}\n/**\n * Daily timing based on time in a day.\n * @export\n * @interface DailyTimeTrigger\n */\nexport interface DailyTimeTrigger {\n    /**\n     * Selected days in a week.\n     * @type {Array<DaysOptions>}\n     * @memberof DailyTimeTrigger\n     */\n    days: Array<DaysOptions>;\n    /**\n     * The hour in a day.\n     * @type {number}\n     * @memberof DailyTimeTrigger\n     */\n    hour: number;\n    /**\n     * Minutes in an hour.\n     * @type {number}\n     * @memberof DailyTimeTrigger\n     */\n    minutes: number;\n}\n/**\n * Days in week.\n * @export\n * @enum {string}\n */\nexport enum DaysOptions {\n    Sunday = <any> 'sunday',\n    Monday = <any> 'monday',\n    Tuesday = <any> 'tuesday',\n    Wednesday = <any> 'wednesday',\n    Thursday = <any> 'thursday',\n    Friday = <any> 'friday',\n    Saturday = <any> 'saturday'\n}\n/**\n * For each supported device, there are limitations and abilities of it.\n * @export\n * @interface DeviceKind\n */\nexport interface DeviceKind {\n    /**\n     * The brand of the current minion type. (see device model).\n     * @type {string}\n     * @memberof DeviceKind\n     */\n    brand: string;\n    /**\n     * The specific model of minion type. (see device model).\n     * @type {string}\n     * @memberof DeviceKind\n     */\n    model: string;\n    /**\n     * The max minions that can be in one device, or -1 if unlimited.  For example, a simple smart socket can be 1 minion per device,  Wall switch with 3 switches can be 3 minions per device,  And IR transmitter can be unlimited minions per device.\n     * @type {number}\n     * @memberof DeviceKind\n     */\n    minionsPerDevice: number;\n    /**\n     * Is the device require a token for communication API.\n     * @type {boolean}\n     * @memberof DeviceKind\n     */\n    isTokenRequired: boolean;\n    /**\n     * Is device require id for communication API.\n     * @type {boolean}\n     * @memberof DeviceKind\n     */\n    isIdRequired: boolean;\n    /**\n     * \n     * @type {MinionTypes}\n     * @memberof DeviceKind\n     */\n    supportedMinionType: MinionTypes;\n    /**\n     * Some of the devices supported recording (for example IR transmitter).\n     * @type {boolean}\n     * @memberof DeviceKind\n     */\n    isRecordingSupported: boolean;\n    /**\n     * Whenever the device and module supported fetching commands data from   the https://github.com/casanet/rf-commands-repo project\n     * @type {boolean}\n     * @memberof DeviceKind\n     */\n    isFetchCommandsAvailable: boolean;\n}\n/**\n * Error response.\n * @export\n * @interface ErrorResponse\n */\nexport interface ErrorResponse {\n    /**\n     * error code in system.\n     * @type {number}\n     * @memberof ErrorResponse\n     */\n    responseCode: number;\n    /**\n     * Readable message.\n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    message?: string;\n}\n/**\n * Valid fan strength.\n * @export\n * @enum {string}\n */\nexport enum FanStrengthOptions {\n    Low = <any> 'low',\n    Med = <any> 'med',\n    High = <any> 'high',\n    Auto = <any> 'auto'\n}\n/**\n * Feed update type enum.\n * @export\n * @enum {string}\n */\nexport enum FeedEvent {\n    Created = <any> 'created',\n    Update = <any> 'update',\n    Removed = <any> 'removed'\n}\n/**\n * Ifttt trigger set status action\n * @export\n * @interface IftttActionTriggered\n */\nexport interface IftttActionTriggered {\n    /**\n     * WebHooks API key\n     * @type {string}\n     * @memberof IftttActionTriggered\n     */\n    apiKey: string;\n    /**\n     * Allow remote-server to forward request to local server\n     * @type {string}\n     * @memberof IftttActionTriggered\n     */\n    localMac?: string;\n    /**\n     * \n     * @type {SwitchOptions}\n     * @memberof IftttActionTriggered\n     */\n    setStatus: SwitchOptions;\n}\n/**\n * Ifttt trigger action auth and forward fields\n * @export\n * @interface IftttActionTriggeredRequest\n */\nexport interface IftttActionTriggeredRequest {\n    /**\n     * WebHooks API key\n     * @type {string}\n     * @memberof IftttActionTriggeredRequest\n     */\n    apiKey: string;\n    /**\n     * Allow remote-server to forward request to local server\n     * @type {string}\n     * @memberof IftttActionTriggeredRequest\n     */\n    localMac?: string;\n}\n/**\n * Ifttt integration settings\n * @export\n * @interface IftttIntegrationSettings\n */\nexport interface IftttIntegrationSettings {\n    /**\n     * WebHooks API key\n     * @type {string}\n     * @memberof IftttIntegrationSettings\n     */\n    apiKey?: string;\n    /**\n     * Open or close ifttt integration.\n     * @type {boolean}\n     * @memberof IftttIntegrationSettings\n     */\n    enableIntegration: boolean;\n}\n/**\n * Ifttt webhook request body to notify minion status changed.  *Used in ifttt module interface only*\n * @export\n * @interface IftttOnChanged\n */\nexport interface IftttOnChanged {\n    /**\n     * Allow remote-server to forward request to local server\n     * @type {string}\n     * @memberof IftttOnChanged\n     */\n    localMac?: string;\n    /**\n     * Device id (AKA Ifttt webhook API key), this is the authentication of request.\n     * @type {string}\n     * @memberof IftttOnChanged\n     */\n    deviceId: string;\n    /**\n     * \n     * @type {SwitchOptions}\n     * @memberof IftttOnChanged\n     */\n    newStatus: SwitchOptions;\n}\n/**\n * Ifttt trigger with all request data in one JSON structure.\n * @export\n * @interface IftttRawActionTriggered\n */\nexport interface IftttRawActionTriggered {\n    /**\n     * WebHooks API key\n     * @type {string}\n     * @memberof IftttRawActionTriggered\n     */\n    apiKey: string;\n    /**\n     * Allow remote-server to forward request to local server\n     * @type {string}\n     * @memberof IftttRawActionTriggered\n     */\n    localMac?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof IftttRawActionTriggered\n     */\n    minionId: string;\n    /**\n     * \n     * @type {SwitchOptions}\n     * @memberof IftttRawActionTriggered\n     */\n    setStatus: SwitchOptions;\n}\n/**\n * A simple light status.  Used to devices that can chang it's brightness.\n * @export\n * @interface Light\n */\nexport interface Light {\n    /**\n     * \n     * @type {SwitchOptions}\n     * @memberof Light\n     */\n    status: SwitchOptions;\n    /**\n     * Minimum 1% maximum 100% of light brightness.\n     * @type {number}\n     * @memberof Light\n     */\n    brightness: number;\n}\n/**\n * Represents any physical device in a local network.\n * @export\n * @interface LocalNetworkDevice\n */\nexport interface LocalNetworkDevice {\n    /**\n     * Display name.\n     * @type {string}\n     * @memberof LocalNetworkDevice\n     */\n    name?: string;\n    /**\n     * The MAC address of the device, the value is unique to each device.\n     * @type {string}\n     * @memberof LocalNetworkDevice\n     */\n    mac: string;\n    /**\n     * Info about device manufacturer.\n     * @type {string}\n     * @memberof LocalNetworkDevice\n     */\n    vendor?: string;\n    /**\n     * The device IP address, if exist it should be unique in network.\n     * @type {string}\n     * @memberof LocalNetworkDevice\n     */\n    ip?: string;\n}\n/**\n * Login schema model.\n * @export\n * @interface Login\n */\nexport interface Login {\n    /**\n     * \n     * @type {string}\n     * @memberof Login\n     */\n    email: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Login\n     */\n    password: string;\n    /**\n     * Optional for remote request forwards only\n     * @type {string}\n     * @memberof Login\n     */\n    localServerId?: string;\n}\n/**\n * \n * @export\n * @interface LoginMfa\n */\nexport interface LoginMfa {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginMfa\n     */\n    email: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginMfa\n     */\n    mfa: string;\n    /**\n     * Optional for remote request forwards only\n     * @type {string}\n     * @memberof LoginMfa\n     */\n    localServerId?: string;\n}\n/**\n * Represents a minion in system.  Minion is a logic device in the system, meaning that a device is a physical device and minion is a logic device  that uses a physical device to switch home kit status. For example, an IR transmitter can be one physical device  for a few minions, one to central AC control and second for secondary AC control  so in it will be two totally different minions that use one physical device.\n * @export\n * @interface Minion\n */\nexport interface Minion {\n    /**\n     * Minion unique id.\n     * @type {string}\n     * @memberof Minion\n     */\n    minionId?: string;\n    /**\n     * The display name for a minion.\n     * @type {string}\n     * @memberof Minion\n     */\n    name: string;\n    /**\n     * \n     * @type {MinionDevice}\n     * @memberof Minion\n     */\n    device: MinionDevice;\n    /**\n     * Is communication with device status ok.\n     * @type {boolean}\n     * @memberof Minion\n     */\n    isProperlyCommunicated?: boolean;\n    /**\n     * \n     * @type {MinionStatus}\n     * @memberof Minion\n     */\n    minionStatus: MinionStatus;\n    /**\n     * \n     * @type {MinionTypes}\n     * @memberof Minion\n     */\n    minionType: MinionTypes;\n    /**\n     * Auto turns  off duration, *if* set member value then the minion will turn off in X ms after turning it on,  Used for example in boiler minion etc.\n     * @type {number}\n     * @memberof Minion\n     */\n    minionAutoTurnOffMS?: number;\n    /**\n     * \n     * @type {MinionCalibrate}\n     * @memberof Minion\n     */\n    calibration?: MinionCalibrate;\n    /**\n     * Represents the room where the minion is located at.\n     * @type {string}\n     * @memberof Minion\n     */\n    room?: string;\n}\n/**\n * Used to change the minion calibration property value.\n * @export\n * @interface MinionCalibrate\n */\nexport interface MinionCalibrate {\n    /**\n     * Minutes to calibrate status, set 0 to turn off calibration\n     * @type {number}\n     * @memberof MinionCalibrate\n     */\n    calibrationCycleMinutes: number;\n    /**\n     * \n     * @type {CalibrationMode}\n     * @memberof MinionCalibrate\n     */\n    calibrationMode: CalibrationMode;\n}\n/**\n * Represents a physical device kind with network info.\n * @export\n * @interface MinionDevice\n */\nexport interface MinionDevice {\n    /**\n     * \n     * @type {LocalNetworkDevice}\n     * @memberof MinionDevice\n     */\n    pysicalDevice: LocalNetworkDevice;\n    /**\n     * The brand of device.\n     * @type {string}\n     * @memberof MinionDevice\n     */\n    brand: string;\n    /**\n     * The specific model of the device.\n     * @type {string}\n     * @memberof MinionDevice\n     */\n    model: string;\n    /**\n     * Some devices require a token for communication API.\n     * @type {string}\n     * @memberof MinionDevice\n     */\n    token?: string;\n    /**\n     * Some devices require id for communication API.\n     * @type {string}\n     * @memberof MinionDevice\n     */\n    deviceId?: string;\n}\n/**\n * Minion feed object.\n * @export\n * @interface MinionFeed\n */\nexport interface MinionFeed {\n    /**\n     * \n     * @type {FeedEvent}\n     * @memberof MinionFeed\n     */\n    event: FeedEvent;\n    /**\n     * \n     * @type {Minion}\n     * @memberof MinionFeed\n     */\n    minion: Minion;\n}\n/**\n * Used to rename minion.\n * @export\n * @interface MinionRename\n */\nexport interface MinionRename {\n    /**\n     * The new name to set.\n     * @type {string}\n     * @memberof MinionRename\n     */\n    name: string;\n}\n/**\n * Used to set minion room name.\n * @export\n * @interface MinionSetRoomName\n */\nexport interface MinionSetRoomName {\n    /**\n     * The new room name to set.\n     * @type {string}\n     * @memberof MinionSetRoomName\n     */\n    room: string;\n}\n/**\n * Minion status, the available values depend on the minion type.\n * @export\n * @interface MinionStatus\n */\nexport interface MinionStatus {\n    /**\n     * \n     * @type {Toggle}\n     * @memberof MinionStatus\n     */\n    toggle?: Toggle;\n    /**\n     * \n     * @type {ModelSwitch}\n     * @memberof MinionStatus\n     */\n    switch?: ModelSwitch;\n    /**\n     * \n     * @type {Roller}\n     * @memberof MinionStatus\n     */\n    roller?: Roller;\n    /**\n     * \n     * @type {Cleaner}\n     * @memberof MinionStatus\n     */\n    cleaner?: Cleaner;\n    /**\n     * \n     * @type {AirConditioning}\n     * @memberof MinionStatus\n     */\n    airConditioning?: AirConditioning;\n    /**\n     * \n     * @type {Light}\n     * @memberof MinionStatus\n     */\n    light?: Light;\n    /**\n     * \n     * @type {TemperatureLight}\n     * @memberof MinionStatus\n     */\n    temperatureLight?: TemperatureLight;\n    /**\n     * \n     * @type {ColorLight}\n     * @memberof MinionStatus\n     */\n    colorLight?: ColorLight;\n}\n/**\n * Minion timeline node\n * @export\n * @interface MinionTimeline\n */\nexport interface MinionTimeline {\n    /**\n     * \n     * @type {string}\n     * @memberof MinionTimeline\n     */\n    minionId: string;\n    /**\n     * \n     * @type {number}\n     * @memberof MinionTimeline\n     */\n    timestamp: number;\n    /**\n     * \n     * @type {MinionStatus}\n     * @memberof MinionTimeline\n     */\n    status: MinionStatus;\n}\n/**\n * Supported minions types.\n * @export\n * @enum {string}\n */\nexport enum MinionTypes {\n    Toggle = <any> 'toggle',\n    Switch = <any> 'switch',\n    Roller = <any> 'roller',\n    Cleaner = <any> 'cleaner',\n    AirConditioning = <any> 'airConditioning',\n    Light = <any> 'light',\n    TemperatureLight = <any> 'temperatureLight',\n    ColorLight = <any> 'colorLight'\n}\n/**\n * A switch status.   Used for simple devices that can be turned on or off. *and minion status is readable*  The properties same as a toggle, and the difference is logic only (if that status is readable or not).\n * @export\n * @interface ModelSwitch\n */\nexport interface ModelSwitch {\n    /**\n     * \n     * @type {SwitchOptions}\n     * @memberof ModelSwitch\n     */\n    status: SwitchOptions;\n}\n/**\n * Once timing structure.\n * @export\n * @interface OnceTiming\n */\nexport interface OnceTiming {\n    /**\n     * UTC time.\n     * @type {number}\n     * @memberof OnceTiming\n     */\n    date: number;\n}\n/**\n * Represents an operation in the system.  An operation is a set of activities to do.  For example, to turn on all home light operation  sets an array of activity for each light in the home to set light status 'on'.\n * @export\n * @interface Operation\n */\nexport interface Operation {\n    /**\n     * Operation unique id.\n     * @type {string}\n     * @memberof Operation\n     */\n    operationId: string;\n    /**\n     * Operation display name.\n     * @type {string}\n     * @memberof Operation\n     */\n    operationName: string;\n    /**\n     * Activities array.\n     * @type {Array<OperationActivity>}\n     * @memberof Operation\n     */\n    activities: Array<OperationActivity>;\n}\n/**\n * Represents activity.\n * @export\n * @interface OperationActivity\n */\nexport interface OperationActivity {\n    /**\n     * Minion id to set\n     * @type {string}\n     * @memberof OperationActivity\n     */\n    minionId: string;\n    /**\n     * \n     * @type {MinionStatus}\n     * @memberof OperationActivity\n     */\n    minionStatus: MinionStatus;\n}\n/**\n * Operation result s, hold set minion status result per minion.\n * @export\n * @interface OperationResult\n */\nexport interface OperationResult {\n    /**\n     * Minion Id.\n     * @type {string}\n     * @memberof OperationResult\n     */\n    minionId: string;\n    /**\n     * \n     * @type {ErrorResponse}\n     * @memberof OperationResult\n     */\n    error?: ErrorResponse;\n}\n/**\n * Long-time job status\n * @export\n * @enum {string}\n */\nexport enum ProgressStatus {\n    InProgress = <any> 'inProgress',\n    Finished = <any> 'finished',\n    Fail = <any> 'fail'\n}\n/**\n * Optional status on a remote connection\n * @export\n * @enum {string}\n */\nexport enum RemoteConnectionStatus {\n    NotConfigured = <any> 'notConfigured',\n    CantReachRemoteServer = <any> 'cantReachRemoteServer',\n    AuthorizationFail = <any> 'authorizationFail',\n    LocalServerDisconnected = <any> 'localServerDisconnected',\n    ConnectionOK = <any> 'connectionOK'\n}\n/**\n * Remote server settings.\n * @export\n * @interface RemoteSettings\n */\nexport interface RemoteSettings {\n    /**\n     * hostname / IP of the remote server\n     * @type {string}\n     * @memberof RemoteSettings\n     */\n    host: string;\n    /**\n     * Access key for authorization local server in the remote server\n     * @type {string}\n     * @memberof RemoteSettings\n     */\n    connectionKey: string;\n}\n/**\n * A roller switch status.  A roller is a switch for curtains or blinds (or for any other needs) that can drag up/down or stop.\n * @export\n * @interface Roller\n */\nexport interface Roller {\n    /**\n     * \n     * @type {SwitchOptions}\n     * @memberof Roller\n     */\n    status: SwitchOptions;\n    /**\n     * \n     * @type {RollerDirection}\n     * @memberof Roller\n     */\n    direction: RollerDirection;\n}\n/**\n * Roller direction\n * @export\n * @enum {string}\n */\nexport enum RollerDirection {\n    Up = <any> 'up',\n    Down = <any> 'down'\n}\n/**\n * Scanning progress status\n * @export\n * @interface ScanningStatus\n */\nexport interface ScanningStatus {\n    /**\n     * \n     * @type {ProgressStatus}\n     * @memberof ScanningStatus\n     */\n    scanningStatus: ProgressStatus;\n}\n/**\n * Used to change the minion auto turn off the timeout value.\n * @export\n * @interface SetMinionAutoTurnOff\n */\nexport interface SetMinionAutoTurnOff {\n    /**\n     * The timeout duration in ms, to turn off set 0 as valse.\n     * @type {number}\n     * @memberof SetMinionAutoTurnOff\n     */\n    setAutoTurnOffMS: number;\n}\n/**\n * Sun triggers.\n * @export\n * @enum {string}\n */\nexport enum SunTriggerOptions {\n    Sunrise = <any> 'sunrise',\n    Sunset = <any> 'sunset'\n}\n/**\n * Switches option\n * @export\n * @enum {string}\n */\nexport enum SwitchOptions {\n    On = <any> 'on',\n    Off = <any> 'off'\n}\n/**\n * A light simple light status.  Used to devices that can chang also light temperature (warm or cold light).\n * @export\n * @interface TemperatureLight\n */\nexport interface TemperatureLight {\n    /**\n     * \n     * @type {SwitchOptions}\n     * @memberof TemperatureLight\n     */\n    status: SwitchOptions;\n    /**\n     * Minimum 1% maximum 100% of light brightness.\n     * @type {number}\n     * @memberof TemperatureLight\n     */\n    brightness: number;\n    /**\n     * Spectrum is 1% to warm light and 100% to cold light.\n     * @type {number}\n     * @memberof TemperatureLight\n     */\n    temperature: number;\n}\n/**\n * Timeout timing structure.\n * @export\n * @interface TimeoutTiming\n */\nexport interface TimeoutTiming {\n    /**\n     * UTC time.\n     * @type {number}\n     * @memberof TimeoutTiming\n     */\n    startDate: number;\n    /**\n     * Duration to activate timing from the start timeout time in minutes.\n     * @type {number}\n     * @memberof TimeoutTiming\n     */\n    durationInMinutes: number;\n}\n/**\n * Represents a timing in the system.\n * @export\n * @interface Timing\n */\nexport interface Timing {\n    /**\n     * Timing unique id.\n     * @type {string}\n     * @memberof Timing\n     */\n    timingId: string;\n    /**\n     * Timing display name.\n     * @type {string}\n     * @memberof Timing\n     */\n    timingName?: string;\n    /**\n     * Operation id to invoke (optional).\n     * @type {string}\n     * @memberof Timing\n     */\n    triggerOperationId?: string;\n    /**\n     * \n     * @type {OperationActivity}\n     * @memberof Timing\n     */\n    triggerDirectAction?: OperationActivity;\n    /**\n     * Is timing active or not.\n     * @type {boolean}\n     * @memberof Timing\n     */\n    isActive: boolean;\n    /**\n     * \n     * @type {TimingTypes}\n     * @memberof Timing\n     */\n    timingType: TimingTypes;\n    /**\n     * \n     * @type {TimingProperties}\n     * @memberof Timing\n     */\n    timingProperties: TimingProperties;\n    /**\n     * Lock the status that changed by the timing (default false)\n     * @type {boolean}\n     * @memberof Timing\n     */\n    lockStatus?: boolean;\n    /**\n     * Set minion lock to be Shabbat mode\n     * @type {boolean}\n     * @memberof Timing\n     */\n    shabbatMode?: boolean;\n    /**\n     * Override lock, if exists (default false)\n     * @type {boolean}\n     * @memberof Timing\n     */\n    overrideLock?: boolean;\n}\n/**\n * Timing feed object.\n * @export\n * @interface TimingFeed\n */\nexport interface TimingFeed {\n    /**\n     * \n     * @type {Timing}\n     * @memberof TimingFeed\n     */\n    timing: Timing;\n    /**\n     * \n     * @type {Array<OperationResult>}\n     * @memberof TimingFeed\n     */\n    results: Array<OperationResult>;\n}\n/**\n * Timing properties, values depend on timing type.\n * @export\n * @interface TimingProperties\n */\nexport interface TimingProperties {\n    /**\n     * \n     * @type {DailySunTrigger}\n     * @memberof TimingProperties\n     */\n    dailySunTrigger?: DailySunTrigger;\n    /**\n     * \n     * @type {DailyTimeTrigger}\n     * @memberof TimingProperties\n     */\n    dailyTimeTrigger?: DailyTimeTrigger;\n    /**\n     * \n     * @type {OnceTiming}\n     * @memberof TimingProperties\n     */\n    once?: OnceTiming;\n    /**\n     * \n     * @type {TimeoutTiming}\n     * @memberof TimingProperties\n     */\n    timeout?: TimeoutTiming;\n}\n/**\n * Supported timings types.\n * @export\n * @enum {string}\n */\nexport enum TimingTypes {\n    DailySunTrigger = <any> 'dailySunTrigger',\n    DailyTimeTrigger = <any> 'dailyTimeTrigger',\n    Once = <any> 'once',\n    Timeout = <any> 'timeout'\n}\n/**\n * A toggle value, the toggle is on way communicated device,  For example wall light switches with 433 RF that can turn on or off  but there is no way to know the real light status if someone changes the light status using physical switch.\n * @export\n * @interface Toggle\n */\nexport interface Toggle {\n    /**\n     * \n     * @type {SwitchOptions}\n     * @memberof Toggle\n     */\n    status: SwitchOptions;\n}\n/**\n * Update version results\n * @export\n * @interface UpdateResults\n */\nexport interface UpdateResults {\n    /**\n     * Application already in the latest version\n     * @type {boolean}\n     * @memberof UpdateResults\n     */\n    alreadyUpToDate: boolean;\n}\n/**\n * Represents a user in the system.\n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * Name\n     * @type {string}\n     * @memberof User\n     */\n    displayName?: string;\n    /**\n     * User email\n     * @type {string}\n     * @memberof User\n     */\n    email: string;\n    /**\n     * User password.\n     * @type {string}\n     * @memberof User\n     */\n    password?: string;\n    /**\n     * Ignore 2-step verification on login or not.\n     * @type {boolean}\n     * @memberof User\n     */\n    ignoreTfa: boolean;\n    /**\n     * \n     * @type {AuthScopes}\n     * @memberof User\n     */\n    scope: AuthScopes;\n    /**\n     * Whenever the user required to set new password, during default password usage, password expiration, etc.\n     * @type {boolean}\n     * @memberof User\n     */\n    passwordChangeRequired?: boolean;\n}\n/**\n * \n * @export\n * @interface UserForwardAuth\n */\nexport interface UserForwardAuth {\n    /**\n     * Generated code that sent to user email account\n     * @type {string}\n     * @memberof UserForwardAuth\n     */\n    code: string;\n}\n/**\n * Version info\n * @export\n * @interface VersionInfo\n */\nexport interface VersionInfo {\n    /**\n     * Latest version (Git Tag) name\n     * @type {string}\n     * @memberof VersionInfo\n     */\n    version: string;\n    /**\n     * Current local master/HEAD commit hash\n     * @type {string}\n     * @memberof VersionInfo\n     */\n    commitHash: string;\n    /**\n     * Time stamp of HEAD commit in UTC format\n     * @type {number}\n     * @memberof VersionInfo\n     */\n    timestamp: number;\n}\n/**\n * Version update progress status\n * @export\n * @interface VersionUpdateStatus\n */\nexport interface VersionUpdateStatus {\n    /**\n     * \n     * @type {ProgressStatus}\n     * @memberof VersionUpdateStatus\n     */\n    updateStatus: ProgressStatus;\n}\n/**\n * AuthenticationApi - fetch parameter creator\n * @export\n */\nexport const AuthenticationApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Login.\n         * @param {Login} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(body: Login, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling login.');\n            }\n            const localVarPath = `/auth/login`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"Login\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * 2-step verification login.\n         * @param {LoginMfa} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        loginTfa(body: LoginMfa, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling loginTfa.');\n            }\n            const localVarPath = `/auth/login/tfa`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"LoginMfa\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Logout manually from the system.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logout(options: any = {}): FetchArgs {\n            const localVarPath = `/auth/logout`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Logout from all activate sessions.\n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logoutSessions(userId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling logoutSessions.');\n            }\n            const localVarPath = `/auth/logout-sessions/{userId}`\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AuthenticationApi - functional programming interface\n * @export\n */\nexport const AuthenticationApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Login.\n         * @param {Login} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(body: Login, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).login(body, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * 2-step verification login.\n         * @param {LoginMfa} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        loginTfa(body: LoginMfa, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).loginTfa(body, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Logout manually from the system.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logout(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).logout(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Logout from all activate sessions.\n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logoutSessions(userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).logoutSessions(userId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * AuthenticationApi - factory interface\n * @export\n */\nexport const AuthenticationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Login.\n         * @param {Login} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(body: Login, options?: any) {\n            return AuthenticationApiFp(configuration).login(body, options)(fetch, basePath);\n        },\n        /**\n         * 2-step verification login.\n         * @param {LoginMfa} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        loginTfa(body: LoginMfa, options?: any) {\n            return AuthenticationApiFp(configuration).loginTfa(body, options)(fetch, basePath);\n        },\n        /**\n         * Logout manually from the system.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logout(options?: any) {\n            return AuthenticationApiFp(configuration).logout(options)(fetch, basePath);\n        },\n        /**\n         * Logout from all activate sessions.\n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logoutSessions(userId: string, options?: any) {\n            return AuthenticationApiFp(configuration).logoutSessions(userId, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * AuthenticationApi - object-oriented interface\n * @export\n * @class AuthenticationApi\n * @extends {BaseAPI}\n */\nexport class AuthenticationApi extends BaseAPI {\n    /**\n     * Login.\n     * @param {Login} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthenticationApi\n     */\n    public login(body: Login, options?: any) {\n        return AuthenticationApiFp(this.configuration).login(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * 2-step verification login.\n     * @param {LoginMfa} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthenticationApi\n     */\n    public loginTfa(body: LoginMfa, options?: any) {\n        return AuthenticationApiFp(this.configuration).loginTfa(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Logout manually from the system.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthenticationApi\n     */\n    public logout(options?: any) {\n        return AuthenticationApiFp(this.configuration).logout(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Logout from all activate sessions.\n     * @param {string} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthenticationApi\n     */\n    public logoutSessions(userId: string, options?: any) {\n        return AuthenticationApiFp(this.configuration).logoutSessions(userId, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * DefaultApi - fetch parameter creator\n * @export\n */\nexport const DefaultApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Get the last logs of the local-server (download as text file)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getLastLogs(options: any = {}): FetchArgs {\n            const localVarPath = `/logs`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the current server data as a ZIP file\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSettingsBackup(options: any = {}): FetchArgs {\n            const localVarPath = `/backup`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Get the last logs of the local-server (download as text file)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getLastLogs(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getLastLogs(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Get the current server data as a ZIP file\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSettingsBackup(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getSettingsBackup(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Get the last logs of the local-server (download as text file)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getLastLogs(options?: any) {\n            return DefaultApiFp(configuration).getLastLogs(options)(fetch, basePath);\n        },\n        /**\n         * Get the current server data as a ZIP file\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSettingsBackup(options?: any) {\n            return DefaultApiFp(configuration).getSettingsBackup(options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * Get the last logs of the local-server (download as text file)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getLastLogs(options?: any) {\n        return DefaultApiFp(this.configuration).getLastLogs(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Get the current server data as a ZIP file\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getSettingsBackup(options?: any) {\n        return DefaultApiFp(this.configuration).getSettingsBackup(options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * DevicesApi - fetch parameter creator\n * @export\n */\nexport const DevicesApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Get all devices in the local network.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDevices(options: any = {}): FetchArgs {\n            const localVarPath = `/devices`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get all supported devices kind info.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDevicesKinds(options: any = {}): FetchArgs {\n            const localVarPath = `/devices/kinds`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Rescan all devices in LAN.  Used when there are changes in the local network.  For example, if the router (DHCP server) change IP's of devices or new device connect to the local network etc.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        rescanDevices(options: any = {}): FetchArgs {\n            const localVarPath = `/devices/rescan`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Set name to a device.\n         * @param {LocalNetworkDevice} body \n         * @param {string} deviceMac Device mac address.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setDeviceName(body: LocalNetworkDevice, deviceMac: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling setDeviceName.');\n            }\n            // verify required parameter 'deviceMac' is not null or undefined\n            if (deviceMac === null || deviceMac === undefined) {\n                throw new RequiredError('deviceMac','Required parameter deviceMac was null or undefined when calling setDeviceName.');\n            }\n            const localVarPath = `/devices/{deviceMac}`\n                .replace(`{${\"deviceMac\"}}`, encodeURIComponent(String(deviceMac)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"LocalNetworkDevice\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DevicesApi - functional programming interface\n * @export\n */\nexport const DevicesApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Get all devices in the local network.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDevices(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<LocalNetworkDevice>> {\n            const localVarFetchArgs = DevicesApiFetchParamCreator(configuration).getDevices(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Get all supported devices kind info.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDevicesKinds(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<DeviceKind>> {\n            const localVarFetchArgs = DevicesApiFetchParamCreator(configuration).getDevicesKinds(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Rescan all devices in LAN.  Used when there are changes in the local network.  For example, if the router (DHCP server) change IP's of devices or new device connect to the local network etc.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        rescanDevices(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = DevicesApiFetchParamCreator(configuration).rescanDevices(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Set name to a device.\n         * @param {LocalNetworkDevice} body \n         * @param {string} deviceMac Device mac address.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setDeviceName(body: LocalNetworkDevice, deviceMac: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = DevicesApiFetchParamCreator(configuration).setDeviceName(body, deviceMac, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * DevicesApi - factory interface\n * @export\n */\nexport const DevicesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Get all devices in the local network.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDevices(options?: any) {\n            return DevicesApiFp(configuration).getDevices(options)(fetch, basePath);\n        },\n        /**\n         * Get all supported devices kind info.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDevicesKinds(options?: any) {\n            return DevicesApiFp(configuration).getDevicesKinds(options)(fetch, basePath);\n        },\n        /**\n         * Rescan all devices in LAN.  Used when there are changes in the local network.  For example, if the router (DHCP server) change IP's of devices or new device connect to the local network etc.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        rescanDevices(options?: any) {\n            return DevicesApiFp(configuration).rescanDevices(options)(fetch, basePath);\n        },\n        /**\n         * Set name to a device.\n         * @param {LocalNetworkDevice} body \n         * @param {string} deviceMac Device mac address.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setDeviceName(body: LocalNetworkDevice, deviceMac: string, options?: any) {\n            return DevicesApiFp(configuration).setDeviceName(body, deviceMac, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * DevicesApi - object-oriented interface\n * @export\n * @class DevicesApi\n * @extends {BaseAPI}\n */\nexport class DevicesApi extends BaseAPI {\n    /**\n     * Get all devices in the local network.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DevicesApi\n     */\n    public getDevices(options?: any) {\n        return DevicesApiFp(this.configuration).getDevices(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Get all supported devices kind info.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DevicesApi\n     */\n    public getDevicesKinds(options?: any) {\n        return DevicesApiFp(this.configuration).getDevicesKinds(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Rescan all devices in LAN.  Used when there are changes in the local network.  For example, if the router (DHCP server) change IP's of devices or new device connect to the local network etc.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DevicesApi\n     */\n    public rescanDevices(options?: any) {\n        return DevicesApiFp(this.configuration).rescanDevices(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Set name to a device.\n     * @param {LocalNetworkDevice} body \n     * @param {string} deviceMac Device mac address.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DevicesApi\n     */\n    public setDeviceName(body: LocalNetworkDevice, deviceMac: string, options?: any) {\n        return DevicesApiFp(this.configuration).setDeviceName(body, deviceMac, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * FeedsApi - fetch parameter creator\n * @export\n */\nexport const FeedsApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Minions feed.  when minion status changed minion created etc.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMinionsFeed(options: any = {}): FetchArgs {\n            const localVarPath = `/feed/minions`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Timing feed.  when timing activated.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTimingFeed(options: any = {}): FetchArgs {\n            const localVarPath = `/feed/timings`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * FeedsApi - functional programming interface\n * @export\n */\nexport const FeedsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Minions feed.  when minion status changed minion created etc.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMinionsFeed(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MinionFeed> {\n            const localVarFetchArgs = FeedsApiFetchParamCreator(configuration).getMinionsFeed(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Timing feed.  when timing activated.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTimingFeed(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TimingFeed> {\n            const localVarFetchArgs = FeedsApiFetchParamCreator(configuration).getTimingFeed(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * FeedsApi - factory interface\n * @export\n */\nexport const FeedsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Minions feed.  when minion status changed minion created etc.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMinionsFeed(options?: any) {\n            return FeedsApiFp(configuration).getMinionsFeed(options)(fetch, basePath);\n        },\n        /**\n         * Timing feed.  when timing activated.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTimingFeed(options?: any) {\n            return FeedsApiFp(configuration).getTimingFeed(options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * FeedsApi - object-oriented interface\n * @export\n * @class FeedsApi\n * @extends {BaseAPI}\n */\nexport class FeedsApi extends BaseAPI {\n    /**\n     * Minions feed.  when minion status changed minion created etc.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedsApi\n     */\n    public getMinionsFeed(options?: any) {\n        return FeedsApiFp(this.configuration).getMinionsFeed(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Timing feed.  when timing activated.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedsApi\n     */\n    public getTimingFeed(options?: any) {\n        return FeedsApiFp(this.configuration).getTimingFeed(options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * IftttApi - fetch parameter creator\n * @export\n */\nexport const IftttApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Is IFTTT integration enabled.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isIftttEnabled(options: any = {}): FetchArgs {\n            const localVarPath = `/ifttt/settings`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Put ifttt integration settings.\n         * @param {IftttIntegrationSettings} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setIftttIntegrationSettings(body: IftttIntegrationSettings, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling setIftttIntegrationSettings.');\n            }\n            const localVarPath = `/ifttt/settings`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"IftttIntegrationSettings\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Ifttt webhooks triggering casa-net *minion* action API.\n         * @param {IftttActionTriggered} body status to set.\n         * @param {string} minionId minion to set status.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        triggeredMinionAction(body: IftttActionTriggered, minionId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling triggeredMinionAction.');\n            }\n            // verify required parameter 'minionId' is not null or undefined\n            if (minionId === null || minionId === undefined) {\n                throw new RequiredError('minionId','Required parameter minionId was null or undefined when calling triggeredMinionAction.');\n            }\n            const localVarPath = `/ifttt/trigger/minions/{minionId}`\n                .replace(`{${\"minionId\"}}`, encodeURIComponent(String(minionId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication iftttAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"apiKey\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"apiKey\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"IftttActionTriggered\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Ifttt webhooks triggering casa-net *operation* action API.\n         * @param {IftttActionTriggeredRequest} body Ifttt request auth and redirect data.\n         * @param {string} operationId operation to invoke.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        triggeredOperationAction(body: IftttActionTriggeredRequest, operationId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling triggeredOperationAction.');\n            }\n            // verify required parameter 'operationId' is not null or undefined\n            if (operationId === null || operationId === undefined) {\n                throw new RequiredError('operationId','Required parameter operationId was null or undefined when calling triggeredOperationAction.');\n            }\n            const localVarPath = `/ifttt/trigger/operations/{operationId}`\n                .replace(`{${\"operationId\"}}`, encodeURIComponent(String(operationId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication iftttAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"apiKey\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"apiKey\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"IftttActionTriggeredRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Ifttt webhooks triggering casa-net action API.  when all details in body only, to allow send all data ion one text line.  Example to use: SMS trigger has only simple text that can pass to IFTTT activity,  and by current request, it is possible to control any minion by one single line of text.  so fill the SMS text with JSON and by IFTTT set it to be the request body.\n         * @param {IftttRawActionTriggered} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        triggeredSomeAction(body: IftttRawActionTriggered, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling triggeredSomeAction.');\n            }\n            const localVarPath = `/ifttt/trigger/minions/raw`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication iftttAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"apiKey\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"apiKey\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"IftttRawActionTriggered\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * IftttApi - functional programming interface\n * @export\n */\nexport const IftttApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Is IFTTT integration enabled.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isIftttEnabled(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {\n            const localVarFetchArgs = IftttApiFetchParamCreator(configuration).isIftttEnabled(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Put ifttt integration settings.\n         * @param {IftttIntegrationSettings} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setIftttIntegrationSettings(body: IftttIntegrationSettings, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = IftttApiFetchParamCreator(configuration).setIftttIntegrationSettings(body, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Ifttt webhooks triggering casa-net *minion* action API.\n         * @param {IftttActionTriggered} body status to set.\n         * @param {string} minionId minion to set status.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        triggeredMinionAction(body: IftttActionTriggered, minionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = IftttApiFetchParamCreator(configuration).triggeredMinionAction(body, minionId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Ifttt webhooks triggering casa-net *operation* action API.\n         * @param {IftttActionTriggeredRequest} body Ifttt request auth and redirect data.\n         * @param {string} operationId operation to invoke.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        triggeredOperationAction(body: IftttActionTriggeredRequest, operationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = IftttApiFetchParamCreator(configuration).triggeredOperationAction(body, operationId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Ifttt webhooks triggering casa-net action API.  when all details in body only, to allow send all data ion one text line.  Example to use: SMS trigger has only simple text that can pass to IFTTT activity,  and by current request, it is possible to control any minion by one single line of text.  so fill the SMS text with JSON and by IFTTT set it to be the request body.\n         * @param {IftttRawActionTriggered} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        triggeredSomeAction(body: IftttRawActionTriggered, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = IftttApiFetchParamCreator(configuration).triggeredSomeAction(body, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * IftttApi - factory interface\n * @export\n */\nexport const IftttApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Is IFTTT integration enabled.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isIftttEnabled(options?: any) {\n            return IftttApiFp(configuration).isIftttEnabled(options)(fetch, basePath);\n        },\n        /**\n         * Put ifttt integration settings.\n         * @param {IftttIntegrationSettings} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setIftttIntegrationSettings(body: IftttIntegrationSettings, options?: any) {\n            return IftttApiFp(configuration).setIftttIntegrationSettings(body, options)(fetch, basePath);\n        },\n        /**\n         * Ifttt webhooks triggering casa-net *minion* action API.\n         * @param {IftttActionTriggered} body status to set.\n         * @param {string} minionId minion to set status.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        triggeredMinionAction(body: IftttActionTriggered, minionId: string, options?: any) {\n            return IftttApiFp(configuration).triggeredMinionAction(body, minionId, options)(fetch, basePath);\n        },\n        /**\n         * Ifttt webhooks triggering casa-net *operation* action API.\n         * @param {IftttActionTriggeredRequest} body Ifttt request auth and redirect data.\n         * @param {string} operationId operation to invoke.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        triggeredOperationAction(body: IftttActionTriggeredRequest, operationId: string, options?: any) {\n            return IftttApiFp(configuration).triggeredOperationAction(body, operationId, options)(fetch, basePath);\n        },\n        /**\n         * Ifttt webhooks triggering casa-net action API.  when all details in body only, to allow send all data ion one text line.  Example to use: SMS trigger has only simple text that can pass to IFTTT activity,  and by current request, it is possible to control any minion by one single line of text.  so fill the SMS text with JSON and by IFTTT set it to be the request body.\n         * @param {IftttRawActionTriggered} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        triggeredSomeAction(body: IftttRawActionTriggered, options?: any) {\n            return IftttApiFp(configuration).triggeredSomeAction(body, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * IftttApi - object-oriented interface\n * @export\n * @class IftttApi\n * @extends {BaseAPI}\n */\nexport class IftttApi extends BaseAPI {\n    /**\n     * Is IFTTT integration enabled.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IftttApi\n     */\n    public isIftttEnabled(options?: any) {\n        return IftttApiFp(this.configuration).isIftttEnabled(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Put ifttt integration settings.\n     * @param {IftttIntegrationSettings} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IftttApi\n     */\n    public setIftttIntegrationSettings(body: IftttIntegrationSettings, options?: any) {\n        return IftttApiFp(this.configuration).setIftttIntegrationSettings(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Ifttt webhooks triggering casa-net *minion* action API.\n     * @param {IftttActionTriggered} body status to set.\n     * @param {string} minionId minion to set status.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IftttApi\n     */\n    public triggeredMinionAction(body: IftttActionTriggered, minionId: string, options?: any) {\n        return IftttApiFp(this.configuration).triggeredMinionAction(body, minionId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Ifttt webhooks triggering casa-net *operation* action API.\n     * @param {IftttActionTriggeredRequest} body Ifttt request auth and redirect data.\n     * @param {string} operationId operation to invoke.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IftttApi\n     */\n    public triggeredOperationAction(body: IftttActionTriggeredRequest, operationId: string, options?: any) {\n        return IftttApiFp(this.configuration).triggeredOperationAction(body, operationId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Ifttt webhooks triggering casa-net action API.  when all details in body only, to allow send all data ion one text line.  Example to use: SMS trigger has only simple text that can pass to IFTTT activity,  and by current request, it is possible to control any minion by one single line of text.  so fill the SMS text with JSON and by IFTTT set it to be the request body.\n     * @param {IftttRawActionTriggered} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IftttApi\n     */\n    public triggeredSomeAction(body: IftttRawActionTriggered, options?: any) {\n        return IftttApiFp(this.configuration).triggeredSomeAction(body, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * MinionsApi - fetch parameter creator\n * @export\n */\nexport const MinionsApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Creates a new minion.\n         * @param {Minion} body The new minion to create.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createMinion(body: Minion, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling createMinion.');\n            }\n            const localVarPath = `/minions`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"Minion\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete minion from the system.\n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteMinion(minionId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'minionId' is not null or undefined\n            if (minionId === null || minionId === undefined) {\n                throw new RequiredError('minionId','Required parameter minionId was null or undefined when calling deleteMinion.');\n            }\n            const localVarPath = `/minions/{minionId}`\n                .replace(`{${\"minionId\"}}`, encodeURIComponent(String(minionId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get minion by id.\n         * @param {string} minionId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMinion(minionId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'minionId' is not null or undefined\n            if (minionId === null || minionId === undefined) {\n                throw new RequiredError('minionId','Required parameter minionId was null or undefined when calling getMinion.');\n            }\n            const localVarPath = `/minions/{minionId}`\n                .replace(`{${\"minionId\"}}`, encodeURIComponent(String(minionId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get all minions in the system.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMinions(options: any = {}): FetchArgs {\n            const localVarPath = `/minions`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the timeline of minions status.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMinionsTimeline(options: any = {}): FetchArgs {\n            const localVarPath = `/minions/timeline`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the current scanning status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSescaningMinionsStatus(options: any = {}): FetchArgs {\n            const localVarPath = `/minions/rescan`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Notify minion status changed by ifttt webhook (https://ifttt.com/maker_webhooks).\n         * @param {IftttOnChanged} body Minion key amd status to set.\n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        notifyMinionStatusChanged(body: IftttOnChanged, minionId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling notifyMinionStatusChanged.');\n            }\n            // verify required parameter 'minionId' is not null or undefined\n            if (minionId === null || minionId === undefined) {\n                throw new RequiredError('minionId','Required parameter minionId was null or undefined when calling notifyMinionStatusChanged.');\n            }\n            const localVarPath = `/minions/{minionId}/ifttt`\n                .replace(`{${\"minionId\"}}`, encodeURIComponent(String(minionId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication iftttAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"apiKey\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"apiKey\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"IftttOnChanged\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Power off all minions\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        powerAllOff(options: any = {}): FetchArgs {\n            const localVarPath = `/minions/power-off`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update minion name.\n         * @param {MinionRename} body \n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        renameMinion(body: MinionRename, minionId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling renameMinion.');\n            }\n            // verify required parameter 'minionId' is not null or undefined\n            if (minionId === null || minionId === undefined) {\n                throw new RequiredError('minionId','Required parameter minionId was null or undefined when calling renameMinion.');\n            }\n            const localVarPath = `/minions/rename/{minionId}`\n                .replace(`{${\"minionId\"}}`, encodeURIComponent(String(minionId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"MinionRename\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update minion room name.\n         * @param {MinionSetRoomName} body Minion room name to set.\n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        renameRoom(body: MinionSetRoomName, minionId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling renameRoom.');\n            }\n            // verify required parameter 'minionId' is not null or undefined\n            if (minionId === null || minionId === undefined) {\n                throw new RequiredError('minionId','Required parameter minionId was null or undefined when calling renameRoom.');\n            }\n            const localVarPath = `/minions/room/{minionId}`\n                .replace(`{${\"minionId\"}}`, encodeURIComponent(String(minionId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"MinionSetRoomName\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Recheck minion device status (update server status cache).\n         * @param {string} minionId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        rescanMinionStatus(minionId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'minionId' is not null or undefined\n            if (minionId === null || minionId === undefined) {\n                throw new RequiredError('minionId','Required parameter minionId was null or undefined when calling rescanMinionStatus.');\n            }\n            const localVarPath = `/minions/rescan/{minionId}`\n                .replace(`{${\"minionId\"}}`, encodeURIComponent(String(minionId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Recheck every minion device status (update server status cache).  Note that this is not the devices scan!  This scanning only checks every minion API to know the current status.\n         * @param {boolean} [scanNetwork] Whenever scan also the local networks IP&#x27;s map or not\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        rescanMinionsStatus(scanNetwork?: boolean, options: any = {}): FetchArgs {\n            const localVarPath = `/minions/rescan`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            if (scanNetwork !== undefined) {\n                localVarQueryParameter['scanNetwork'] = scanNetwork;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update minion status.\n         * @param {MinionStatus} body Minion status to set.\n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setMinion(body: MinionStatus, minionId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling setMinion.');\n            }\n            // verify required parameter 'minionId' is not null or undefined\n            if (minionId === null || minionId === undefined) {\n                throw new RequiredError('minionId','Required parameter minionId was null or undefined when calling setMinion.');\n            }\n            const localVarPath = `/minions/{minionId}`\n                .replace(`{${\"minionId\"}}`, encodeURIComponent(String(minionId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"MinionStatus\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update minion auto turns off timeout.\n         * @param {MinionCalibrate} body \n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setMinionCalibrate(body: MinionCalibrate, minionId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling setMinionCalibrate.');\n            }\n            // verify required parameter 'minionId' is not null or undefined\n            if (minionId === null || minionId === undefined) {\n                throw new RequiredError('minionId','Required parameter minionId was null or undefined when calling setMinionCalibrate.');\n            }\n            const localVarPath = `/minions/calibrate/{minionId}`\n                .replace(`{${\"minionId\"}}`, encodeURIComponent(String(minionId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"MinionCalibrate\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update minion auto turns off timeout.\n         * @param {SetMinionAutoTurnOff} body Timeout property.\n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setMinionTimeout(body: SetMinionAutoTurnOff, minionId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling setMinionTimeout.');\n            }\n            // verify required parameter 'minionId' is not null or undefined\n            if (minionId === null || minionId === undefined) {\n                throw new RequiredError('minionId','Required parameter minionId was null or undefined when calling setMinionTimeout.');\n            }\n            const localVarPath = `/minions/timeout/{minionId}`\n                .replace(`{${\"minionId\"}}`, encodeURIComponent(String(minionId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"SetMinionAutoTurnOff\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * MinionsApi - functional programming interface\n * @export\n */\nexport const MinionsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Creates a new minion.\n         * @param {Minion} body The new minion to create.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createMinion(body: Minion, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = MinionsApiFetchParamCreator(configuration).createMinion(body, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Delete minion from the system.\n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteMinion(minionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = MinionsApiFetchParamCreator(configuration).deleteMinion(minionId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Get minion by id.\n         * @param {string} minionId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMinion(minionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Minion> {\n            const localVarFetchArgs = MinionsApiFetchParamCreator(configuration).getMinion(minionId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Get all minions in the system.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMinions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Minion>> {\n            const localVarFetchArgs = MinionsApiFetchParamCreator(configuration).getMinions(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Get the timeline of minions status.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMinionsTimeline(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<MinionTimeline>> {\n            const localVarFetchArgs = MinionsApiFetchParamCreator(configuration).getMinionsTimeline(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Get the current scanning status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSescaningMinionsStatus(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ScanningStatus> {\n            const localVarFetchArgs = MinionsApiFetchParamCreator(configuration).getSescaningMinionsStatus(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Notify minion status changed by ifttt webhook (https://ifttt.com/maker_webhooks).\n         * @param {IftttOnChanged} body Minion key amd status to set.\n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        notifyMinionStatusChanged(body: IftttOnChanged, minionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = MinionsApiFetchParamCreator(configuration).notifyMinionStatusChanged(body, minionId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Power off all minions\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        powerAllOff(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = MinionsApiFetchParamCreator(configuration).powerAllOff(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Update minion name.\n         * @param {MinionRename} body \n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        renameMinion(body: MinionRename, minionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = MinionsApiFetchParamCreator(configuration).renameMinion(body, minionId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Update minion room name.\n         * @param {MinionSetRoomName} body Minion room name to set.\n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        renameRoom(body: MinionSetRoomName, minionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = MinionsApiFetchParamCreator(configuration).renameRoom(body, minionId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Recheck minion device status (update server status cache).\n         * @param {string} minionId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        rescanMinionStatus(minionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = MinionsApiFetchParamCreator(configuration).rescanMinionStatus(minionId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Recheck every minion device status (update server status cache).  Note that this is not the devices scan!  This scanning only checks every minion API to know the current status.\n         * @param {boolean} [scanNetwork] Whenever scan also the local networks IP&#x27;s map or not\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        rescanMinionsStatus(scanNetwork?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = MinionsApiFetchParamCreator(configuration).rescanMinionsStatus(scanNetwork, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Update minion status.\n         * @param {MinionStatus} body Minion status to set.\n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setMinion(body: MinionStatus, minionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = MinionsApiFetchParamCreator(configuration).setMinion(body, minionId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Update minion auto turns off timeout.\n         * @param {MinionCalibrate} body \n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setMinionCalibrate(body: MinionCalibrate, minionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = MinionsApiFetchParamCreator(configuration).setMinionCalibrate(body, minionId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Update minion auto turns off timeout.\n         * @param {SetMinionAutoTurnOff} body Timeout property.\n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setMinionTimeout(body: SetMinionAutoTurnOff, minionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = MinionsApiFetchParamCreator(configuration).setMinionTimeout(body, minionId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * MinionsApi - factory interface\n * @export\n */\nexport const MinionsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Creates a new minion.\n         * @param {Minion} body The new minion to create.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createMinion(body: Minion, options?: any) {\n            return MinionsApiFp(configuration).createMinion(body, options)(fetch, basePath);\n        },\n        /**\n         * Delete minion from the system.\n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteMinion(minionId: string, options?: any) {\n            return MinionsApiFp(configuration).deleteMinion(minionId, options)(fetch, basePath);\n        },\n        /**\n         * Get minion by id.\n         * @param {string} minionId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMinion(minionId: string, options?: any) {\n            return MinionsApiFp(configuration).getMinion(minionId, options)(fetch, basePath);\n        },\n        /**\n         * Get all minions in the system.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMinions(options?: any) {\n            return MinionsApiFp(configuration).getMinions(options)(fetch, basePath);\n        },\n        /**\n         * Get the timeline of minions status.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMinionsTimeline(options?: any) {\n            return MinionsApiFp(configuration).getMinionsTimeline(options)(fetch, basePath);\n        },\n        /**\n         * Get the current scanning status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSescaningMinionsStatus(options?: any) {\n            return MinionsApiFp(configuration).getSescaningMinionsStatus(options)(fetch, basePath);\n        },\n        /**\n         * Notify minion status changed by ifttt webhook (https://ifttt.com/maker_webhooks).\n         * @param {IftttOnChanged} body Minion key amd status to set.\n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        notifyMinionStatusChanged(body: IftttOnChanged, minionId: string, options?: any) {\n            return MinionsApiFp(configuration).notifyMinionStatusChanged(body, minionId, options)(fetch, basePath);\n        },\n        /**\n         * Power off all minions\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        powerAllOff(options?: any) {\n            return MinionsApiFp(configuration).powerAllOff(options)(fetch, basePath);\n        },\n        /**\n         * Update minion name.\n         * @param {MinionRename} body \n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        renameMinion(body: MinionRename, minionId: string, options?: any) {\n            return MinionsApiFp(configuration).renameMinion(body, minionId, options)(fetch, basePath);\n        },\n        /**\n         * Update minion room name.\n         * @param {MinionSetRoomName} body Minion room name to set.\n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        renameRoom(body: MinionSetRoomName, minionId: string, options?: any) {\n            return MinionsApiFp(configuration).renameRoom(body, minionId, options)(fetch, basePath);\n        },\n        /**\n         * Recheck minion device status (update server status cache).\n         * @param {string} minionId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        rescanMinionStatus(minionId: string, options?: any) {\n            return MinionsApiFp(configuration).rescanMinionStatus(minionId, options)(fetch, basePath);\n        },\n        /**\n         * Recheck every minion device status (update server status cache).  Note that this is not the devices scan!  This scanning only checks every minion API to know the current status.\n         * @param {boolean} [scanNetwork] Whenever scan also the local networks IP&#x27;s map or not\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        rescanMinionsStatus(scanNetwork?: boolean, options?: any) {\n            return MinionsApiFp(configuration).rescanMinionsStatus(scanNetwork, options)(fetch, basePath);\n        },\n        /**\n         * Update minion status.\n         * @param {MinionStatus} body Minion status to set.\n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setMinion(body: MinionStatus, minionId: string, options?: any) {\n            return MinionsApiFp(configuration).setMinion(body, minionId, options)(fetch, basePath);\n        },\n        /**\n         * Update minion auto turns off timeout.\n         * @param {MinionCalibrate} body \n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setMinionCalibrate(body: MinionCalibrate, minionId: string, options?: any) {\n            return MinionsApiFp(configuration).setMinionCalibrate(body, minionId, options)(fetch, basePath);\n        },\n        /**\n         * Update minion auto turns off timeout.\n         * @param {SetMinionAutoTurnOff} body Timeout property.\n         * @param {string} minionId Minion id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setMinionTimeout(body: SetMinionAutoTurnOff, minionId: string, options?: any) {\n            return MinionsApiFp(configuration).setMinionTimeout(body, minionId, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * MinionsApi - object-oriented interface\n * @export\n * @class MinionsApi\n * @extends {BaseAPI}\n */\nexport class MinionsApi extends BaseAPI {\n    /**\n     * Creates a new minion.\n     * @param {Minion} body The new minion to create.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MinionsApi\n     */\n    public createMinion(body: Minion, options?: any) {\n        return MinionsApiFp(this.configuration).createMinion(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Delete minion from the system.\n     * @param {string} minionId Minion id.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MinionsApi\n     */\n    public deleteMinion(minionId: string, options?: any) {\n        return MinionsApiFp(this.configuration).deleteMinion(minionId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Get minion by id.\n     * @param {string} minionId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MinionsApi\n     */\n    public getMinion(minionId: string, options?: any) {\n        return MinionsApiFp(this.configuration).getMinion(minionId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Get all minions in the system.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MinionsApi\n     */\n    public getMinions(options?: any) {\n        return MinionsApiFp(this.configuration).getMinions(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Get the timeline of minions status.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MinionsApi\n     */\n    public getMinionsTimeline(options?: any) {\n        return MinionsApiFp(this.configuration).getMinionsTimeline(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Get the current scanning status\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MinionsApi\n     */\n    public getSescaningMinionsStatus(options?: any) {\n        return MinionsApiFp(this.configuration).getSescaningMinionsStatus(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Notify minion status changed by ifttt webhook (https://ifttt.com/maker_webhooks).\n     * @param {IftttOnChanged} body Minion key amd status to set.\n     * @param {string} minionId Minion id.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MinionsApi\n     */\n    public notifyMinionStatusChanged(body: IftttOnChanged, minionId: string, options?: any) {\n        return MinionsApiFp(this.configuration).notifyMinionStatusChanged(body, minionId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Power off all minions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MinionsApi\n     */\n    public powerAllOff(options?: any) {\n        return MinionsApiFp(this.configuration).powerAllOff(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Update minion name.\n     * @param {MinionRename} body \n     * @param {string} minionId Minion id.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MinionsApi\n     */\n    public renameMinion(body: MinionRename, minionId: string, options?: any) {\n        return MinionsApiFp(this.configuration).renameMinion(body, minionId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Update minion room name.\n     * @param {MinionSetRoomName} body Minion room name to set.\n     * @param {string} minionId Minion id.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MinionsApi\n     */\n    public renameRoom(body: MinionSetRoomName, minionId: string, options?: any) {\n        return MinionsApiFp(this.configuration).renameRoom(body, minionId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Recheck minion device status (update server status cache).\n     * @param {string} minionId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MinionsApi\n     */\n    public rescanMinionStatus(minionId: string, options?: any) {\n        return MinionsApiFp(this.configuration).rescanMinionStatus(minionId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Recheck every minion device status (update server status cache).  Note that this is not the devices scan!  This scanning only checks every minion API to know the current status.\n     * @param {boolean} [scanNetwork] Whenever scan also the local networks IP&#x27;s map or not\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MinionsApi\n     */\n    public rescanMinionsStatus(scanNetwork?: boolean, options?: any) {\n        return MinionsApiFp(this.configuration).rescanMinionsStatus(scanNetwork, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Update minion status.\n     * @param {MinionStatus} body Minion status to set.\n     * @param {string} minionId Minion id.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MinionsApi\n     */\n    public setMinion(body: MinionStatus, minionId: string, options?: any) {\n        return MinionsApiFp(this.configuration).setMinion(body, minionId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Update minion auto turns off timeout.\n     * @param {MinionCalibrate} body \n     * @param {string} minionId Minion id.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MinionsApi\n     */\n    public setMinionCalibrate(body: MinionCalibrate, minionId: string, options?: any) {\n        return MinionsApiFp(this.configuration).setMinionCalibrate(body, minionId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Update minion auto turns off timeout.\n     * @param {SetMinionAutoTurnOff} body Timeout property.\n     * @param {string} minionId Minion id.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MinionsApi\n     */\n    public setMinionTimeout(body: SetMinionAutoTurnOff, minionId: string, options?: any) {\n        return MinionsApiFp(this.configuration).setMinionTimeout(body, minionId, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * OperationsApi - fetch parameter creator\n * @export\n */\nexport const OperationsApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Creates a new operation.\n         * @param {Operation} body The new operation to create.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOperation(body: Operation, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling createOperation.');\n            }\n            const localVarPath = `/operations`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"Operation\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete operation from the system.\n         * @param {string} operationId Operation id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteOperation(operationId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'operationId' is not null or undefined\n            if (operationId === null || operationId === undefined) {\n                throw new RequiredError('operationId','Required parameter operationId was null or undefined when calling deleteOperation.');\n            }\n            const localVarPath = `/operations/{operationId}`\n                .replace(`{${\"operationId\"}}`, encodeURIComponent(String(operationId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get operation by id.\n         * @param {string} operationId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOperation(operationId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'operationId' is not null or undefined\n            if (operationId === null || operationId === undefined) {\n                throw new RequiredError('operationId','Required parameter operationId was null or undefined when calling getOperation.');\n            }\n            const localVarPath = `/operations/{operationId}`\n                .replace(`{${\"operationId\"}}`, encodeURIComponent(String(operationId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get all operations in the system.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOperations(options: any = {}): FetchArgs {\n            const localVarPath = `/operations`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update operation properties.\n         * @param {Operation} body Operation object to update to.\n         * @param {string} operationId OperationId id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setOperation(body: Operation, operationId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling setOperation.');\n            }\n            // verify required parameter 'operationId' is not null or undefined\n            if (operationId === null || operationId === undefined) {\n                throw new RequiredError('operationId','Required parameter operationId was null or undefined when calling setOperation.');\n            }\n            const localVarPath = `/operations/{operationId}`\n                .replace(`{${\"operationId\"}}`, encodeURIComponent(String(operationId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"Operation\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Invoke operation.\n         * @param {string} operationId Operation id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        triggerOperation(operationId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'operationId' is not null or undefined\n            if (operationId === null || operationId === undefined) {\n                throw new RequiredError('operationId','Required parameter operationId was null or undefined when calling triggerOperation.');\n            }\n            const localVarPath = `/operations/trigger/{operationId}`\n                .replace(`{${\"operationId\"}}`, encodeURIComponent(String(operationId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * OperationsApi - functional programming interface\n * @export\n */\nexport const OperationsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Creates a new operation.\n         * @param {Operation} body The new operation to create.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOperation(body: Operation, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).createOperation(body, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Delete operation from the system.\n         * @param {string} operationId Operation id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteOperation(operationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).deleteOperation(operationId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Get operation by id.\n         * @param {string} operationId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOperation(operationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Operation> {\n            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).getOperation(operationId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Get all operations in the system.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOperations(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Operation>> {\n            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).getOperations(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Update operation properties.\n         * @param {Operation} body Operation object to update to.\n         * @param {string} operationId OperationId id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setOperation(body: Operation, operationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).setOperation(body, operationId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Invoke operation.\n         * @param {string} operationId Operation id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        triggerOperation(operationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<OperationResult>> {\n            const localVarFetchArgs = OperationsApiFetchParamCreator(configuration).triggerOperation(operationId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * OperationsApi - factory interface\n * @export\n */\nexport const OperationsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Creates a new operation.\n         * @param {Operation} body The new operation to create.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createOperation(body: Operation, options?: any) {\n            return OperationsApiFp(configuration).createOperation(body, options)(fetch, basePath);\n        },\n        /**\n         * Delete operation from the system.\n         * @param {string} operationId Operation id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteOperation(operationId: string, options?: any) {\n            return OperationsApiFp(configuration).deleteOperation(operationId, options)(fetch, basePath);\n        },\n        /**\n         * Get operation by id.\n         * @param {string} operationId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOperation(operationId: string, options?: any) {\n            return OperationsApiFp(configuration).getOperation(operationId, options)(fetch, basePath);\n        },\n        /**\n         * Get all operations in the system.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOperations(options?: any) {\n            return OperationsApiFp(configuration).getOperations(options)(fetch, basePath);\n        },\n        /**\n         * Update operation properties.\n         * @param {Operation} body Operation object to update to.\n         * @param {string} operationId OperationId id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setOperation(body: Operation, operationId: string, options?: any) {\n            return OperationsApiFp(configuration).setOperation(body, operationId, options)(fetch, basePath);\n        },\n        /**\n         * Invoke operation.\n         * @param {string} operationId Operation id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        triggerOperation(operationId: string, options?: any) {\n            return OperationsApiFp(configuration).triggerOperation(operationId, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * OperationsApi - object-oriented interface\n * @export\n * @class OperationsApi\n * @extends {BaseAPI}\n */\nexport class OperationsApi extends BaseAPI {\n    /**\n     * Creates a new operation.\n     * @param {Operation} body The new operation to create.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OperationsApi\n     */\n    public createOperation(body: Operation, options?: any) {\n        return OperationsApiFp(this.configuration).createOperation(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Delete operation from the system.\n     * @param {string} operationId Operation id.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OperationsApi\n     */\n    public deleteOperation(operationId: string, options?: any) {\n        return OperationsApiFp(this.configuration).deleteOperation(operationId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Get operation by id.\n     * @param {string} operationId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OperationsApi\n     */\n    public getOperation(operationId: string, options?: any) {\n        return OperationsApiFp(this.configuration).getOperation(operationId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Get all operations in the system.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OperationsApi\n     */\n    public getOperations(options?: any) {\n        return OperationsApiFp(this.configuration).getOperations(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Update operation properties.\n     * @param {Operation} body Operation object to update to.\n     * @param {string} operationId OperationId id.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OperationsApi\n     */\n    public setOperation(body: Operation, operationId: string, options?: any) {\n        return OperationsApiFp(this.configuration).setOperation(body, operationId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Invoke operation.\n     * @param {string} operationId Operation id.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OperationsApi\n     */\n    public triggerOperation(operationId: string, options?: any) {\n        return OperationsApiFp(this.configuration).triggerOperation(operationId, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * RFApi - fetch parameter creator\n * @export\n */\nexport const RFApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Fetch commands set for certain minion see https://github.com/casanet/rf-commands-repo API.\n         * @param {CommandsRepoDevice} body devices commands set to fetch.\n         * @param {string} minionId minion to fetch commands for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchDeviceCommandsToMinion(body: CommandsRepoDevice, minionId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling fetchDeviceCommandsToMinion.');\n            }\n            // verify required parameter 'minionId' is not null or undefined\n            if (minionId === null || minionId === undefined) {\n                throw new RequiredError('minionId','Required parameter minionId was null or undefined when calling fetchDeviceCommandsToMinion.');\n            }\n            const localVarPath = `/rf/fetch-commands/{minionId}`\n                .replace(`{${\"minionId\"}}`, encodeURIComponent(String(minionId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"CommandsRepoDevice\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Generate a command (IR, 433-RF or any other supported RF tech)  for current minion status.\n         * @param {MinionStatus} body Minion object status to generate command for.\n         * @param {string} minionId Minon id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        generateMinionCommand(body: MinionStatus, minionId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling generateMinionCommand.');\n            }\n            // verify required parameter 'minionId' is not null or undefined\n            if (minionId === null || minionId === undefined) {\n                throw new RequiredError('minionId','Required parameter minionId was null or undefined when calling generateMinionCommand.');\n            }\n            const localVarPath = `/rf/generate/{minionId}`\n                .replace(`{${\"minionId\"}}`, encodeURIComponent(String(minionId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"MinionStatus\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get all aupported devices in commands repo see https://github.com/casanet/rf-commands-repo API.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCommandsRepoAvailableDevices(options: any = {}): FetchArgs {\n            const localVarPath = `/rf/devices`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Record a command (IR, 433-RF or any other supported RF tech)  for current minion status.\n         * @param {MinionStatus} body Minion object status to get command for.\n         * @param {string} minionId Minon id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        recordMinionCommand(body: MinionStatus, minionId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling recordMinionCommand.');\n            }\n            // verify required parameter 'minionId' is not null or undefined\n            if (minionId === null || minionId === undefined) {\n                throw new RequiredError('minionId','Required parameter minionId was null or undefined when calling recordMinionCommand.');\n            }\n            const localVarPath = `/rf/record/{minionId}`\n                .replace(`{${\"minionId\"}}`, encodeURIComponent(String(minionId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"MinionStatus\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * RFApi - functional programming interface\n * @export\n */\nexport const RFApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Fetch commands set for certain minion see https://github.com/casanet/rf-commands-repo API.\n         * @param {CommandsRepoDevice} body devices commands set to fetch.\n         * @param {string} minionId minion to fetch commands for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchDeviceCommandsToMinion(body: CommandsRepoDevice, minionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = RFApiFetchParamCreator(configuration).fetchDeviceCommandsToMinion(body, minionId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Generate a command (IR, 433-RF or any other supported RF tech)  for current minion status.\n         * @param {MinionStatus} body Minion object status to generate command for.\n         * @param {string} minionId Minon id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        generateMinionCommand(body: MinionStatus, minionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = RFApiFetchParamCreator(configuration).generateMinionCommand(body, minionId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Get all aupported devices in commands repo see https://github.com/casanet/rf-commands-repo API.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCommandsRepoAvailableDevices(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<CommandsRepoDevice>> {\n            const localVarFetchArgs = RFApiFetchParamCreator(configuration).getCommandsRepoAvailableDevices(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Record a command (IR, 433-RF or any other supported RF tech)  for current minion status.\n         * @param {MinionStatus} body Minion object status to get command for.\n         * @param {string} minionId Minon id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        recordMinionCommand(body: MinionStatus, minionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = RFApiFetchParamCreator(configuration).recordMinionCommand(body, minionId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * RFApi - factory interface\n * @export\n */\nexport const RFApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Fetch commands set for certain minion see https://github.com/casanet/rf-commands-repo API.\n         * @param {CommandsRepoDevice} body devices commands set to fetch.\n         * @param {string} minionId minion to fetch commands for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchDeviceCommandsToMinion(body: CommandsRepoDevice, minionId: string, options?: any) {\n            return RFApiFp(configuration).fetchDeviceCommandsToMinion(body, minionId, options)(fetch, basePath);\n        },\n        /**\n         * Generate a command (IR, 433-RF or any other supported RF tech)  for current minion status.\n         * @param {MinionStatus} body Minion object status to generate command for.\n         * @param {string} minionId Minon id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        generateMinionCommand(body: MinionStatus, minionId: string, options?: any) {\n            return RFApiFp(configuration).generateMinionCommand(body, minionId, options)(fetch, basePath);\n        },\n        /**\n         * Get all aupported devices in commands repo see https://github.com/casanet/rf-commands-repo API.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCommandsRepoAvailableDevices(options?: any) {\n            return RFApiFp(configuration).getCommandsRepoAvailableDevices(options)(fetch, basePath);\n        },\n        /**\n         * Record a command (IR, 433-RF or any other supported RF tech)  for current minion status.\n         * @param {MinionStatus} body Minion object status to get command for.\n         * @param {string} minionId Minon id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        recordMinionCommand(body: MinionStatus, minionId: string, options?: any) {\n            return RFApiFp(configuration).recordMinionCommand(body, minionId, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * RFApi - object-oriented interface\n * @export\n * @class RFApi\n * @extends {BaseAPI}\n */\nexport class RFApi extends BaseAPI {\n    /**\n     * Fetch commands set for certain minion see https://github.com/casanet/rf-commands-repo API.\n     * @param {CommandsRepoDevice} body devices commands set to fetch.\n     * @param {string} minionId minion to fetch commands for.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RFApi\n     */\n    public fetchDeviceCommandsToMinion(body: CommandsRepoDevice, minionId: string, options?: any) {\n        return RFApiFp(this.configuration).fetchDeviceCommandsToMinion(body, minionId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Generate a command (IR, 433-RF or any other supported RF tech)  for current minion status.\n     * @param {MinionStatus} body Minion object status to generate command for.\n     * @param {string} minionId Minon id.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RFApi\n     */\n    public generateMinionCommand(body: MinionStatus, minionId: string, options?: any) {\n        return RFApiFp(this.configuration).generateMinionCommand(body, minionId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Get all aupported devices in commands repo see https://github.com/casanet/rf-commands-repo API.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RFApi\n     */\n    public getCommandsRepoAvailableDevices(options?: any) {\n        return RFApiFp(this.configuration).getCommandsRepoAvailableDevices(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Record a command (IR, 433-RF or any other supported RF tech)  for current minion status.\n     * @param {MinionStatus} body Minion object status to get command for.\n     * @param {string} minionId Minon id.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RFApi\n     */\n    public recordMinionCommand(body: MinionStatus, minionId: string, options?: any) {\n        return RFApiFp(this.configuration).recordMinionCommand(body, minionId, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * RemoteApi - fetch parameter creator\n * @export\n */\nexport const RemoteApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Get connection status to remote status.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConnectionStatus(options: any = {}): FetchArgs {\n            const localVarPath = `/remote/status`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get local casa-server machine mac address.  Used when creating a new local server in a remote server.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMachineMac(options: any = {}): FetchArgs {\n            const localVarPath = `/remote/machine-mac`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get remote server host/IP.  or empty if not set.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRemoteHost(options: any = {}): FetchArgs {\n            const localVarPath = `/remote`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Remove and disconnect remote server connection.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeRemoteSettings(options: any = {}): FetchArgs {\n            const localVarPath = `/remote`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Connect to remote server with given remote settings.\n         * @param {RemoteSettings} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setRemoteSettings(body: RemoteSettings, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling setRemoteSettings.');\n            }\n            const localVarPath = `/remote`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"RemoteSettings\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * RemoteApi - functional programming interface\n * @export\n */\nexport const RemoteApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Get connection status to remote status.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConnectionStatus(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RemoteConnectionStatus> {\n            const localVarFetchArgs = RemoteApiFetchParamCreator(configuration).getConnectionStatus(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Get local casa-server machine mac address.  Used when creating a new local server in a remote server.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMachineMac(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = RemoteApiFetchParamCreator(configuration).getMachineMac(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Get remote server host/IP.  or empty if not set.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRemoteHost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = RemoteApiFetchParamCreator(configuration).getRemoteHost(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Remove and disconnect remote server connection.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeRemoteSettings(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = RemoteApiFetchParamCreator(configuration).removeRemoteSettings(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Connect to remote server with given remote settings.\n         * @param {RemoteSettings} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setRemoteSettings(body: RemoteSettings, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = RemoteApiFetchParamCreator(configuration).setRemoteSettings(body, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * RemoteApi - factory interface\n * @export\n */\nexport const RemoteApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Get connection status to remote status.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConnectionStatus(options?: any) {\n            return RemoteApiFp(configuration).getConnectionStatus(options)(fetch, basePath);\n        },\n        /**\n         * Get local casa-server machine mac address.  Used when creating a new local server in a remote server.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMachineMac(options?: any) {\n            return RemoteApiFp(configuration).getMachineMac(options)(fetch, basePath);\n        },\n        /**\n         * Get remote server host/IP.  or empty if not set.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRemoteHost(options?: any) {\n            return RemoteApiFp(configuration).getRemoteHost(options)(fetch, basePath);\n        },\n        /**\n         * Remove and disconnect remote server connection.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeRemoteSettings(options?: any) {\n            return RemoteApiFp(configuration).removeRemoteSettings(options)(fetch, basePath);\n        },\n        /**\n         * Connect to remote server with given remote settings.\n         * @param {RemoteSettings} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setRemoteSettings(body: RemoteSettings, options?: any) {\n            return RemoteApiFp(configuration).setRemoteSettings(body, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * RemoteApi - object-oriented interface\n * @export\n * @class RemoteApi\n * @extends {BaseAPI}\n */\nexport class RemoteApi extends BaseAPI {\n    /**\n     * Get connection status to remote status.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RemoteApi\n     */\n    public getConnectionStatus(options?: any) {\n        return RemoteApiFp(this.configuration).getConnectionStatus(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Get local casa-server machine mac address.  Used when creating a new local server in a remote server.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RemoteApi\n     */\n    public getMachineMac(options?: any) {\n        return RemoteApiFp(this.configuration).getMachineMac(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Get remote server host/IP.  or empty if not set.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RemoteApi\n     */\n    public getRemoteHost(options?: any) {\n        return RemoteApiFp(this.configuration).getRemoteHost(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Remove and disconnect remote server connection.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RemoteApi\n     */\n    public removeRemoteSettings(options?: any) {\n        return RemoteApiFp(this.configuration).removeRemoteSettings(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Connect to remote server with given remote settings.\n     * @param {RemoteSettings} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RemoteApi\n     */\n    public setRemoteSettings(body: RemoteSettings, options?: any) {\n        return RemoteApiFp(this.configuration).setRemoteSettings(body, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * TimingsApi - fetch parameter creator\n * @export\n */\nexport const TimingsApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Creates a new timing.\n         * @param {Timing} body The new timing to create.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTiming(body: Timing, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling createTiming.');\n            }\n            const localVarPath = `/timings`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"Timing\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete timing from the system.\n         * @param {string} timingId Timing id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteTiming(timingId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'timingId' is not null or undefined\n            if (timingId === null || timingId === undefined) {\n                throw new RequiredError('timingId','Required parameter timingId was null or undefined when calling deleteTiming.');\n            }\n            const localVarPath = `/timings/{timingId}`\n                .replace(`{${\"timingId\"}}`, encodeURIComponent(String(timingId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get timing by id.\n         * @param {string} timingId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTiming(timingId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'timingId' is not null or undefined\n            if (timingId === null || timingId === undefined) {\n                throw new RequiredError('timingId','Required parameter timingId was null or undefined when calling getTiming.');\n            }\n            const localVarPath = `/timings/{timingId}`\n                .replace(`{${\"timingId\"}}`, encodeURIComponent(String(timingId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get all the timings in the system.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTimings(options: any = {}): FetchArgs {\n            const localVarPath = `/timings`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update timing properties.\n         * @param {Timing} body Timing object to update to.\n         * @param {string} timingId Timing id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setTiming(body: Timing, timingId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling setTiming.');\n            }\n            // verify required parameter 'timingId' is not null or undefined\n            if (timingId === null || timingId === undefined) {\n                throw new RequiredError('timingId','Required parameter timingId was null or undefined when calling setTiming.');\n            }\n            const localVarPath = `/timings/{timingId}`\n                .replace(`{${\"timingId\"}}`, encodeURIComponent(String(timingId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"Timing\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * TimingsApi - functional programming interface\n * @export\n */\nexport const TimingsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Creates a new timing.\n         * @param {Timing} body The new timing to create.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTiming(body: Timing, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = TimingsApiFetchParamCreator(configuration).createTiming(body, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Delete timing from the system.\n         * @param {string} timingId Timing id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteTiming(timingId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = TimingsApiFetchParamCreator(configuration).deleteTiming(timingId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Get timing by id.\n         * @param {string} timingId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTiming(timingId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Timing> {\n            const localVarFetchArgs = TimingsApiFetchParamCreator(configuration).getTiming(timingId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Get all the timings in the system.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTimings(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Timing>> {\n            const localVarFetchArgs = TimingsApiFetchParamCreator(configuration).getTimings(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Update timing properties.\n         * @param {Timing} body Timing object to update to.\n         * @param {string} timingId Timing id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setTiming(body: Timing, timingId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = TimingsApiFetchParamCreator(configuration).setTiming(body, timingId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * TimingsApi - factory interface\n * @export\n */\nexport const TimingsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Creates a new timing.\n         * @param {Timing} body The new timing to create.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createTiming(body: Timing, options?: any) {\n            return TimingsApiFp(configuration).createTiming(body, options)(fetch, basePath);\n        },\n        /**\n         * Delete timing from the system.\n         * @param {string} timingId Timing id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteTiming(timingId: string, options?: any) {\n            return TimingsApiFp(configuration).deleteTiming(timingId, options)(fetch, basePath);\n        },\n        /**\n         * Get timing by id.\n         * @param {string} timingId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTiming(timingId: string, options?: any) {\n            return TimingsApiFp(configuration).getTiming(timingId, options)(fetch, basePath);\n        },\n        /**\n         * Get all the timings in the system.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTimings(options?: any) {\n            return TimingsApiFp(configuration).getTimings(options)(fetch, basePath);\n        },\n        /**\n         * Update timing properties.\n         * @param {Timing} body Timing object to update to.\n         * @param {string} timingId Timing id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setTiming(body: Timing, timingId: string, options?: any) {\n            return TimingsApiFp(configuration).setTiming(body, timingId, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * TimingsApi - object-oriented interface\n * @export\n * @class TimingsApi\n * @extends {BaseAPI}\n */\nexport class TimingsApi extends BaseAPI {\n    /**\n     * Creates a new timing.\n     * @param {Timing} body The new timing to create.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TimingsApi\n     */\n    public createTiming(body: Timing, options?: any) {\n        return TimingsApiFp(this.configuration).createTiming(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Delete timing from the system.\n     * @param {string} timingId Timing id.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TimingsApi\n     */\n    public deleteTiming(timingId: string, options?: any) {\n        return TimingsApiFp(this.configuration).deleteTiming(timingId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Get timing by id.\n     * @param {string} timingId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TimingsApi\n     */\n    public getTiming(timingId: string, options?: any) {\n        return TimingsApiFp(this.configuration).getTiming(timingId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Get all the timings in the system.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TimingsApi\n     */\n    public getTimings(options?: any) {\n        return TimingsApiFp(this.configuration).getTimings(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Update timing properties.\n     * @param {Timing} body Timing object to update to.\n     * @param {string} timingId Timing id.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TimingsApi\n     */\n    public setTiming(body: Timing, timingId: string, options?: any) {\n        return TimingsApiFp(this.configuration).setTiming(body, timingId, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * UsersApi - fetch parameter creator\n * @export\n */\nexport const UsersApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Creates a new user.\n         * @param {User} body The new user to create.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUser(body: User, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling createUser.');\n            }\n            const localVarPath = `/users`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"User\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete user from the system.\n         * @param {string} userId User id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteUser(userId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling deleteUser.');\n            }\n            const localVarPath = `/users/{userId}`\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get user profile.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getProfile(options: any = {}): FetchArgs {\n            const localVarPath = `/users/profile`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get registered users for forwarding from remote to local.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRegisteredUsers(options: any = {}): FetchArgs {\n            const localVarPath = `/users/forward`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get user by id.\n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUser(userId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUser.');\n            }\n            const localVarPath = `/users/{userId}`\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get all users in the system.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUsers(options: any = {}): FetchArgs {\n            const localVarPath = `/users`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Remove account from local server valid account to forward from remote to local\n         * @param {string} userId User id/email to unregister.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeUserForwarding(userId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling removeUserForwarding.');\n            }\n            const localVarPath = `/users/forward/{userId}`\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Request registration code.\n         * @param {string} userId User id/email to send code to.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        requestUserForwarding(userId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling requestUserForwarding.');\n            }\n            const localVarPath = `/users/forward-auth/{userId}`\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Register account to allow forward HTTP requests from remote to local server.\n         * @param {UserForwardAuth} body \n         * @param {string} userId User id/email to register.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        requestUserForwardingAuth(body: UserForwardAuth, userId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling requestUserForwardingAuth.');\n            }\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling requestUserForwardingAuth.');\n            }\n            const localVarPath = `/users/forward/{userId}`\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"UserForwardAuth\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update user properties.\n         * @param {User} body User object to update to.\n         * @param {string} userId User id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setUser(body: User, userId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling setUser.');\n            }\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling setUser.');\n            }\n            const localVarPath = `/users/{userId}`\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"User\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * UsersApi - functional programming interface\n * @export\n */\nexport const UsersApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Creates a new user.\n         * @param {User} body The new user to create.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUser(body: User, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).createUser(body, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Delete user from the system.\n         * @param {string} userId User id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteUser(userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).deleteUser(userId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Get user profile.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getProfile(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).getProfile(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Get registered users for forwarding from remote to local.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRegisteredUsers(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {\n            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).getRegisteredUsers(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Get user by id.\n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUser(userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {\n            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).getUser(userId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Get all users in the system.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUsers(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<User>> {\n            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).getUsers(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Remove account from local server valid account to forward from remote to local\n         * @param {string} userId User id/email to unregister.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeUserForwarding(userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).removeUserForwarding(userId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Request registration code.\n         * @param {string} userId User id/email to send code to.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        requestUserForwarding(userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).requestUserForwarding(userId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Register account to allow forward HTTP requests from remote to local server.\n         * @param {UserForwardAuth} body \n         * @param {string} userId User id/email to register.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        requestUserForwardingAuth(body: UserForwardAuth, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).requestUserForwardingAuth(body, userId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Update user properties.\n         * @param {User} body User object to update to.\n         * @param {string} userId User id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setUser(body: User, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).setUser(body, userId, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * UsersApi - factory interface\n * @export\n */\nexport const UsersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Creates a new user.\n         * @param {User} body The new user to create.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUser(body: User, options?: any) {\n            return UsersApiFp(configuration).createUser(body, options)(fetch, basePath);\n        },\n        /**\n         * Delete user from the system.\n         * @param {string} userId User id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteUser(userId: string, options?: any) {\n            return UsersApiFp(configuration).deleteUser(userId, options)(fetch, basePath);\n        },\n        /**\n         * Get user profile.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getProfile(options?: any) {\n            return UsersApiFp(configuration).getProfile(options)(fetch, basePath);\n        },\n        /**\n         * Get registered users for forwarding from remote to local.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRegisteredUsers(options?: any) {\n            return UsersApiFp(configuration).getRegisteredUsers(options)(fetch, basePath);\n        },\n        /**\n         * Get user by id.\n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUser(userId: string, options?: any) {\n            return UsersApiFp(configuration).getUser(userId, options)(fetch, basePath);\n        },\n        /**\n         * Get all users in the system.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUsers(options?: any) {\n            return UsersApiFp(configuration).getUsers(options)(fetch, basePath);\n        },\n        /**\n         * Remove account from local server valid account to forward from remote to local\n         * @param {string} userId User id/email to unregister.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeUserForwarding(userId: string, options?: any) {\n            return UsersApiFp(configuration).removeUserForwarding(userId, options)(fetch, basePath);\n        },\n        /**\n         * Request registration code.\n         * @param {string} userId User id/email to send code to.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        requestUserForwarding(userId: string, options?: any) {\n            return UsersApiFp(configuration).requestUserForwarding(userId, options)(fetch, basePath);\n        },\n        /**\n         * Register account to allow forward HTTP requests from remote to local server.\n         * @param {UserForwardAuth} body \n         * @param {string} userId User id/email to register.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        requestUserForwardingAuth(body: UserForwardAuth, userId: string, options?: any) {\n            return UsersApiFp(configuration).requestUserForwardingAuth(body, userId, options)(fetch, basePath);\n        },\n        /**\n         * Update user properties.\n         * @param {User} body User object to update to.\n         * @param {string} userId User id.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setUser(body: User, userId: string, options?: any) {\n            return UsersApiFp(configuration).setUser(body, userId, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * UsersApi - object-oriented interface\n * @export\n * @class UsersApi\n * @extends {BaseAPI}\n */\nexport class UsersApi extends BaseAPI {\n    /**\n     * Creates a new user.\n     * @param {User} body The new user to create.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UsersApi\n     */\n    public createUser(body: User, options?: any) {\n        return UsersApiFp(this.configuration).createUser(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Delete user from the system.\n     * @param {string} userId User id.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UsersApi\n     */\n    public deleteUser(userId: string, options?: any) {\n        return UsersApiFp(this.configuration).deleteUser(userId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Get user profile.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UsersApi\n     */\n    public getProfile(options?: any) {\n        return UsersApiFp(this.configuration).getProfile(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Get registered users for forwarding from remote to local.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UsersApi\n     */\n    public getRegisteredUsers(options?: any) {\n        return UsersApiFp(this.configuration).getRegisteredUsers(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Get user by id.\n     * @param {string} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UsersApi\n     */\n    public getUser(userId: string, options?: any) {\n        return UsersApiFp(this.configuration).getUser(userId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Get all users in the system.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UsersApi\n     */\n    public getUsers(options?: any) {\n        return UsersApiFp(this.configuration).getUsers(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Remove account from local server valid account to forward from remote to local\n     * @param {string} userId User id/email to unregister.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UsersApi\n     */\n    public removeUserForwarding(userId: string, options?: any) {\n        return UsersApiFp(this.configuration).removeUserForwarding(userId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Request registration code.\n     * @param {string} userId User id/email to send code to.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UsersApi\n     */\n    public requestUserForwarding(userId: string, options?: any) {\n        return UsersApiFp(this.configuration).requestUserForwarding(userId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Register account to allow forward HTTP requests from remote to local server.\n     * @param {UserForwardAuth} body \n     * @param {string} userId User id/email to register.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UsersApi\n     */\n    public requestUserForwardingAuth(body: UserForwardAuth, userId: string, options?: any) {\n        return UsersApiFp(this.configuration).requestUserForwardingAuth(body, userId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Update user properties.\n     * @param {User} body User object to update to.\n     * @param {string} userId User id.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UsersApi\n     */\n    public setUser(body: User, userId: string, options?: any) {\n        return UsersApiFp(this.configuration).setUser(body, userId, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * VersionApi - fetch parameter creator\n * @export\n */\nexport const VersionApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Get current version.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCurrentVersion(options: any = {}): FetchArgs {\n            const localVarPath = `/version`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get current version update progress status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUpdateStatus(options: any = {}): FetchArgs {\n            const localVarPath = `/version/update-status`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Detect if the current version is last, and if not return the latest version.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isLatestVersion(options: any = {}): FetchArgs {\n            const localVarPath = `/version/is-up-date`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            // authentication userAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update Casanet application to the latest version (Restart required for the version update complete).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateVersion(options: any = {}): FetchArgs {\n            const localVarPath = `/version/latest`;\n            const localVarUrlObj = url.parse(localVarPath, true) as any;\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication adminAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"authentication\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"authentication\"] = localVarApiKeyValue;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            \t\t\t\t\t\tdelete localVarUrlObj.search;\n\t\t\t\t\t\tlocalVarRequestOptions.credentials = 'include';\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * VersionApi - functional programming interface\n * @export\n */\nexport const VersionApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Get current version.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCurrentVersion(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VersionInfo> {\n            const localVarFetchArgs = VersionApiFetchParamCreator(configuration).getCurrentVersion(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Get current version update progress status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUpdateStatus(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VersionUpdateStatus> {\n            const localVarFetchArgs = VersionApiFetchParamCreator(configuration).getUpdateStatus(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Detect if the current version is last, and if not return the latest version.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isLatestVersion(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = VersionApiFetchParamCreator(configuration).isLatestVersion(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Update Casanet application to the latest version (Restart required for the version update complete).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateVersion(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UpdateResults> {\n            const localVarFetchArgs = VersionApiFetchParamCreator(configuration).updateVersion(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = envFacade.apiUrl) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * VersionApi - factory interface\n * @export\n */\nexport const VersionApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Get current version.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCurrentVersion(options?: any) {\n            return VersionApiFp(configuration).getCurrentVersion(options)(fetch, basePath);\n        },\n        /**\n         * Get current version update progress status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUpdateStatus(options?: any) {\n            return VersionApiFp(configuration).getUpdateStatus(options)(fetch, basePath);\n        },\n        /**\n         * Detect if the current version is last, and if not return the latest version.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isLatestVersion(options?: any) {\n            return VersionApiFp(configuration).isLatestVersion(options)(fetch, basePath);\n        },\n        /**\n         * Update Casanet application to the latest version (Restart required for the version update complete).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateVersion(options?: any) {\n            return VersionApiFp(configuration).updateVersion(options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * VersionApi - object-oriented interface\n * @export\n * @class VersionApi\n * @extends {BaseAPI}\n */\nexport class VersionApi extends BaseAPI {\n    /**\n     * Get current version.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VersionApi\n     */\n    public getCurrentVersion(options?: any) {\n        return VersionApiFp(this.configuration).getCurrentVersion(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Get current version update progress status\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VersionApi\n     */\n    public getUpdateStatus(options?: any) {\n        return VersionApiFp(this.configuration).getUpdateStatus(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Detect if the current version is last, and if not return the latest version.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VersionApi\n     */\n    public isLatestVersion(options?: any) {\n        return VersionApiFp(this.configuration).isLatestVersion(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Update Casanet application to the latest version (Restart required for the version update complete).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VersionApi\n     */\n    public updateVersion(options?: any) {\n        return VersionApiFp(this.configuration).updateVersion(options)(this.fetch, this.basePath);\n    }\n\n}\n","import { useEffect, useState } from 'react';\nimport { livelinessFeed, livelinessFlag, LivelinessInfo } from '../services/liveliness.service';\n\n/**\n * Liveliness hook, get the presents state of the liveliness info \n * @returns The presents @see LivelinessInfo\n */\nexport function useLiveliness(): LivelinessInfo {\n\t// The liveliness state \n\tconst [liveliness, setLiveliness] = useState(livelinessFlag);\n\n\tuseEffect(() => {\n\t\tlet livelinessDetacher: () => void;\n\n\t\t// Subscribe to the liveliness \n\t\tlivelinessDetacher = livelinessFeed.attach(setLiveliness);\n\n\t\treturn () => {\n\t\t\t// unsubscribe the feed on component unmount\n\t\t\tlivelinessDetacher?.();\n\t\t};\n\t\t// Run only once, on component mount.\n\t}, []);\n\n\treturn liveliness;\n}\n","\nimport { DataService } from '../infrastructure/data-service-base';\nimport { VersionInfo } from '../infrastructure/generated/api';\nimport { ApiFacade } from '../infrastructure/generated/proxies/api-proxies';\nclass RemoteURLService extends DataService<string> {\n\tfetchData(): Promise<string> {\n\t\treturn ApiFacade.RemoteApi.getRemoteHost();\n\t}\n}\nexport const remoteURLService = new RemoteURLService();\n\n\nclass VersionDataService extends DataService<VersionInfo> {\n\tfetchData(): Promise<VersionInfo> {\n\t\treturn ApiFacade.VersionApi.getCurrentVersion();\n\t}\n}\nexport const versionDataService = new VersionDataService();\n\nclass VersionLatestService extends DataService<string> {\n\tfetchData(): Promise<string> {\n\t\treturn ApiFacade.VersionApi.isLatestVersion();\n\t}\n}\nexport const versionLatestService = new VersionLatestService();\n","\nimport { SyncEvent } from 'ts-events';\nimport { LIVELINESS_ACK_INTERVAL } from '../infrastructure/consts';\nimport { RemoteConnectionStatus } from '../infrastructure/generated/api';\nimport { ApiFacade } from '../infrastructure/generated/proxies/api-proxies';\nimport { sessionManager } from '../infrastructure/session-manager';\nimport { sleep } from '../infrastructure/utils';\n\nexport interface LivelinessInfo {\n\t/** Whenever the communication with server is OK */\n\tonline: boolean;\n\t/** The remote server connection status */\n\tremoteConnection: RemoteConnectionStatus;\n}\n\n/**\n * The current known liveliness status\n */\nexport const livelinessFlag: LivelinessInfo = {\n\tonline: true,\n\tremoteConnection: RemoteConnectionStatus.NotConfigured\n}\n\nexport const livelinessFeed = new SyncEvent<LivelinessInfo>();\n\nexport async function livelinessCheck() {\n\ttry {\n\t\t// Try send ack\n\t\tconst remoteConnectionStatus = await ApiFacade.RemoteApi.getConnectionStatus();\n\n\t\t// If online mode changed, publish update\n\t\tif (!livelinessFlag.online) {\n\t\t\tlivelinessFlag.online = true;\n\t\t\tlivelinessFeed.post({\n\t\t\t\tonline: true,\n\t\t\t\tremoteConnection: livelinessFlag.remoteConnection,\n\t\t\t});\n\t\t}\n\n\t\t// If remote connection has been updated, publish update\n\t\tif (remoteConnectionStatus !== livelinessFlag.remoteConnection) {\n\t\t\tlivelinessFlag.remoteConnection = remoteConnectionStatus;\n\t\t\tlivelinessFeed.post({\n\t\t\t\tonline: livelinessFlag.online,\n\t\t\t\tremoteConnection: remoteConnectionStatus,\n\t\t\t});\n\t\t}\n\n\n\t} catch (error) {\n\t\t// If online mode changed, publish update\n\t\tif (livelinessFlag.online) {\n\t\t\tlivelinessFlag.online = false;\n\t\t\tlivelinessFeed.post({\n\t\t\t\tonline: false,\n\t\t\t\tremoteConnection: livelinessFlag.remoteConnection,\n\t\t\t});\n\t\t}\n\t}\n}\n\n/** Liveliness status ack */\nasync function livelinessAck() {\n\n\t// Run forever\n\twhile (true) {\n\t\t// Dont send ack while logged off\n\t\tif (sessionManager.isLoggedOn) {\n\t\t\tawait livelinessCheck();\n\t\t}\n\n\t\t// Sleep the interval\n\t\tawait sleep(LIVELINESS_ACK_INTERVAL);\n\t}\n}\n\n// Active ack\nlivelinessAck();\n","export default __webpack_public_path__ + \"static/media/logo-app.98b45cdc.png\";","import { IconButton, PaletteType } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\"\nimport DarkIcon from '@material-ui/icons/Brightness4';\nimport LightIcon from '@material-ui/icons/BrightnessHigh';\nimport { ThemeTooltip } from \"./global/ThemeTooltip\";\n\ninterface ThemeToggleProps {\n\ttheme: PaletteType;\n\tsetDarkMode: (paletteType: PaletteType) => void;\n}\nexport function ThemeToggle(props: ThemeToggleProps) {\n\tconst { t } = useTranslation();\n\n\treturn <div>\n\t\t<ThemeTooltip title={<span>{t('dashboard.toolbar.theme.toggle')}</span>} enterDelay={100}>\n\t\t\t<IconButton\n\t\t\t\tonClick={() => props.setDarkMode(props.theme === 'dark' ? 'light' : 'dark')}\n\t\t\t\tcolor=\"inherit\">\n\t\t\t\t{props.theme === 'dark' ? <LightIcon fontSize=\"small\" /> : <DarkIcon fontSize=\"small\" />}\n\t\t\t</IconButton>\n\t\t</ThemeTooltip>\n\t</div>\n}","import { LocalNetworkDevice } from \"../infrastructure/generated/api\";\nimport { ApiFacade } from \"../infrastructure/generated/proxies/api-proxies\";\nimport { DataService } from \"../infrastructure/data-service-base\";\n\nclass DevicesService extends DataService<LocalNetworkDevice[]> {\n\n\tfetchData(): Promise<LocalNetworkDevice[]> {\n\t\t// Get the fetch data function (without activating it yet)\n\t\treturn ApiFacade.DevicesApi.getDevices();\n\t}\n}\n\nexport const devicesService = new DevicesService();\n","import { User } from \"../../infrastructure/generated/api\";\n\n/**\n * Get the first letter of user's display name parts and combine the first two parts (for example haim kasnter to HK :)\n * @param profile The profile to get text for\n * @returns The extracted text for avatar\n */\nexport function extractProfileAvatarText(profile?: User): string {\n\t// Trim the name, split by space (if empty, generate two dashes), for each word take the first, and make it capital, then take \n\t// the first two works and combine them to one string. thats it :)\n\treturn (profile?.displayName?.trim().split(' ') || ['-', '-']).map(p => p[0]?.toUpperCase()).slice(0, 2).join('');\n}\n","import { RemoteConnectionStatus } from \"../../infrastructure/generated/api\";\n\nexport const remoteConnectionDisplayKey: { [key in RemoteConnectionStatus]: string } = {\n\t[RemoteConnectionStatus.ConnectionOK]: 'dashboard.toolbar.remote.connection.ok',\n\t[RemoteConnectionStatus.LocalServerDisconnected]: 'dashboard.toolbar.remote.connection.local.server.disconnected',\n\t[RemoteConnectionStatus.NotConfigured]: 'dashboard.toolbar.remote.connection.not.configured',\n\t[RemoteConnectionStatus.CantReachRemoteServer]: 'dashboard.toolbar.remote.connection.cant.access.remote.server',\n\t[RemoteConnectionStatus.AuthorizationFail]: 'dashboard.toolbar.remote.connection.auth.failed',\n}","import { useEffect, useState } from \"react\";\n\nexport function SideBarBottom() {\n\tconst [time, setTime] = useState<string>();\n\n\tuseEffect(() => {\n\t\tconst intervalHandler = setInterval(() => {\n\t\t\tsetTime(new Date().toLocaleTimeString())\n\t\t}, 1000);\n\n\t\treturn () => {\n\t\t\tclearInterval(intervalHandler)\n\t\t}\n\t}, []);\n\n\treturn <div>{time}</div>\n}","import { Avatar, Divider, IconButton, ListItemIcon, Menu, MenuItem, Typography } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport { User } from \"../../infrastructure/generated/api\";\nimport { getLocalStorageItem, LocalStorageKey } from \"../../infrastructure/local-storage\";\nimport '../../theme/styles/components/profileAvatar.scss';\nimport InfoOutlined from '@material-ui/icons/InfoOutlined';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport HelpOutlineOutlined from '@material-ui/icons/HelpOutlineOutlined';\nimport PermIdentityOutlined from '@material-ui/icons/PermIdentityOutlined';\nimport { ApiFacade } from \"../../infrastructure/generated/proxies/api-proxies\";\nimport { useTranslation } from \"react-i18next\";\nimport { sessionManager } from \"../../infrastructure/session-manager\";\nimport { useHistory } from \"react-router-dom\";\nimport { AppRoutes, DashboardRoutes } from \"../../infrastructure/consts\";\nimport { extractProfileAvatarText } from \"../../logic/common/profileUtils\";\n\nexport function ProfileAvatar() {\n\tconst { t } = useTranslation();\n\tconst history = useHistory();\n\tconst [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\tconst [avatarLetters, setAvatarLetters] = useState<string>('');\n\n\tuseEffect(() => {\n\t\t// Read user session info from local storage, it may be not up to date, but it's good enough for the avatar icon.\n\t\tconst profile = getLocalStorageItem<User>(LocalStorageKey.Profile, { itemType: 'object' });\n\t\tsetAvatarLetters(extractProfileAvatarText(profile));\n\t}, [])\n\n\tfunction handleOpenMenu(event: React.MouseEvent<HTMLElement>) {\n\t\tsetAnchorEl(event.currentTarget);\n\t};\n\n\tfunction handleClose() {\n\t\tsetAnchorEl(null);\n\t};\n\n\tfunction handleLogout() {\n\t\tApiFacade.AuthenticationApi.logout().catch(() => {\n\t\t\t// TODO: LOG\n\t\t});\n\t\tsessionManager.onLogout();\n\t\thistory.push(AppRoutes.login.path);\n\t};\n\n\tfunction goToProfile() {\n\t\thistory.push(DashboardRoutes.profile.path);\n\t};\n\n\treturn <div className=\"profile-avatar-container\">\n\t\t<IconButton\n\t\t\tclassName=\"profile-avatar\"\n\t\t\taria-label={t('dashboard.appbar.profile')}\n\t\t\taria-controls=\"menu-profile-appbar\"\n\t\t\taria-haspopup=\"true\"\n\t\t\tonClick={handleOpenMenu}\n\t\t\tcolor=\"inherit\"\n\t\t>\n\t\t\t<Avatar >{avatarLetters}</Avatar>\n\t\t</IconButton>\n\n\t\t<Menu\n\t\t\tid=\"menu-profile-appbar\"\n\t\t\televation={0}\n\t\t\tgetContentAnchorEl={null}\n\t\t\tanchorEl={anchorEl}\n\t\t\tanchorOrigin={{\n\t\t\t\tvertical: 'bottom',\n\t\t\t\thorizontal: 'center',\n\t\t\t}}\n\t\t\tkeepMounted\n\t\t\ttransformOrigin={{\n\t\t\t\tvertical: 'top',\n\t\t\t\thorizontal: 'center',\n\t\t\t}}\n\t\t\topen={Boolean(anchorEl)}\n\t\t\tonClose={handleClose}\n\t\t>\n\t\t\t<MenuItem>\n\t\t\t\t<div onClick={goToProfile}>\n\t\t\t\t\t<ListItemIcon className=\"profile-menu-item-icon\">\n\t\t\t\t\t\t<PermIdentityOutlined fontSize=\"small\" />\n\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t<Typography variant=\"inherit\">\n\t\t\t\t\t\t{t('global.profile')}\n\t\t\t\t\t</Typography>\n\t\t\t\t</div>\n\t\t\t</MenuItem>\n\t\t\t<MenuItem >\n\t\t\t\t<ListItemIcon className=\"profile-menu-item-icon\">\n\t\t\t\t\t<HelpOutlineOutlined fontSize=\"small\" />\n\t\t\t\t</ListItemIcon>\n\t\t\t\t<Typography variant=\"inherit\">\n\t\t\t\t\t{t('global.help')}\n\t\t\t\t</Typography>\n\t\t\t</MenuItem>\n\t\t\t<MenuItem >\n\t\t\t\t<ListItemIcon className=\"profile-menu-item-icon\">\n\t\t\t\t\t<InfoOutlined fontSize=\"small\" />\n\t\t\t\t</ListItemIcon>\n\t\t\t\t<Typography variant=\"inherit\">\n\t\t\t\t\t{t('global.about')}\n\t\t\t\t</Typography></MenuItem>\n\t\t\t<Divider />\n\t\t\t<MenuItem onClick={handleLogout}>\n\t\t\t\t<ListItemIcon className=\"profile-menu-item-icon\">\n\t\t\t\t\t<ExitToAppIcon fontSize=\"small\" />\n\t\t\t\t</ListItemIcon>\n\t\t\t\t<Typography variant=\"inherit\">\n\t\t\t\t\t{t('global.logout')}\n\t\t\t\t</Typography>\n\t\t\t</MenuItem>\n\t\t</Menu>\n\t</div>\n}","import { Grid, IconButton, makeStyles, PaletteType } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { versionLatestService } from \"../../services/settings.service\";\nimport ErrorIcon from '@material-ui/icons/Error';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CloudDoneIcon from '@material-ui/icons/CloudDone';\nimport CloudOffIcon from '@material-ui/icons/CloudOff';\nimport { RemoteConnectionStatus, User } from \"../../infrastructure/generated/api\";\nimport { ThemeToggle } from \"../ThemeToggle\";\nimport { ThemeTooltip } from \"../global/ThemeTooltip\";\nimport { remoteConnectionDisplayKey } from \"../../logic/common/settingsUtils\";\nimport Badge from '@mui/material/Badge';\nimport { marginRight } from \"../../logic/common/themeUtils\";\nimport SystemUpdateIcon from '@mui/icons-material/SystemUpdate';\nimport { useHistory } from \"react-router-dom\";\nimport { DashboardRoutes } from \"../../infrastructure/consts\";\nimport { getLocalStorageItem, LocalStorageKey } from \"../../infrastructure/local-storage\";\nimport { profileService } from \"../../services/users.service\";\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport { useData } from \"../../hooks/useData\";\nimport { useLiveliness } from \"../../hooks/useLiveliness\";\n\nconst useStyles = makeStyles((theme) => ({\n\tbadge: {\n\t\t[marginRight(theme)]: 2,\n\t\tmarginTop: 0,\n\t\tborder: `1.5px solid ${theme.palette.background.default}`,\n\t},\n}));\n\ninterface ToolBarControlsProps {\n\ttheme: PaletteType;\n\tsetDarkMode: (paletteType: PaletteType) => void;\n}\n\nexport function ToolBarControls(props: ToolBarControlsProps) {\n\tconst { t } = useTranslation();\n\tconst classes = useStyles();\n\tconst history = useHistory();\n\n\tconst { online, remoteConnection } = useLiveliness();\n\tconst [newVersion] = useData(versionLatestService, undefined, { skipErrorToastOnFailure: true });\n\n\tconst [passwordChangeRequired, setPasswordChangeRequired] = useState<boolean>();\n\tuseEffect(() => {\n\t\tlet setPasswordRequiredDetacher: () => void;\n\t\t(async () => {\n\n\t\t\ttry {\n\t\t\t\tconst cachedProfile = getLocalStorageItem<User>(LocalStorageKey.Profile, { itemType: 'object' });\n\t\t\t\t// To skip unnecessary requests, Only if the password mark as \"required change\" in the local storage\n\t\t\t\t// Go to check if this flag still ON, and if so, show warning about it \n\t\t\t\tif (cachedProfile?.passwordChangeRequired) {\n\t\t\t\t\tsetPasswordChangeRequired(true);\n\t\t\t\t\tsetPasswordRequiredDetacher = await profileService.attachDataSubs((profile) => {\n\t\t\t\t\t\tsetPasswordChangeRequired(profile.passwordChangeRequired);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Do nothing\n\t\t\t}\n\n\t\t})();\n\n\t\treturn () => {\n\t\t\t// unsubscribe the feed on component unmount\n\t\t\tsetPasswordRequiredDetacher && setPasswordRequiredDetacher();\n\t\t};\n\t}, []);\n\n\treturn <div>\n\t\t<Grid\n\t\t\tcontainer\n\t\t\tdirection=\"row\"\n\t\t\tjustifyContent=\"flex-end\"\n\t\t\talignItems=\"center\"\n\t\t>\n\t\t\t{passwordChangeRequired && <div>\n\t\t\t\t<ThemeTooltip title={<span>{t(`dashboard.toolbar.change.password.alert`)}</span>}>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tonClick={() => history.push(DashboardRoutes.profile.path)}\n\t\t\t\t\t\tcolor=\"inherit\">\n\t\t\t\t\t\t<Badge color=\"error\" overlap={'circular'} variant=\"dot\" classes={{ badge: classes.badge }}>\n\t\t\t\t\t\t\t<AccountCircleIcon fontSize=\"small\" />\n\t\t\t\t\t\t</Badge>\n\t\t\t\t\t</IconButton>\n\t\t\t\t</ThemeTooltip>\n\t\t\t</div>}\n\t\t\t{newVersion && <div>\n\t\t\t\t<ThemeTooltip title={<span>{t(`dashboard.toolbar.new.version.available`, { newVersion })}</span>}>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tonClick={() => history.push(DashboardRoutes.settings.path)}\n\t\t\t\t\t\tcolor=\"inherit\">\n\t\t\t\t\t\t<Badge color=\"error\" overlap={'circular'} variant=\"dot\" classes={{ badge: classes.badge }}>\n\t\t\t\t\t\t\t<SystemUpdateIcon fontSize=\"small\" />\n\t\t\t\t\t\t</Badge>\n\t\t\t\t\t</IconButton>\n\t\t\t\t</ThemeTooltip>\n\t\t\t</div>}\n\t\t\t<div>\n\t\t\t\t{/* Do not show cloud indicator in case of remote not configured at all */}\n\t\t\t\t{remoteConnection !== RemoteConnectionStatus.NotConfigured && <ThemeTooltip title={<span>{t(remoteConnectionDisplayKey[remoteConnection])}</span>}>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tonClick={() => history.push(DashboardRoutes.settings.path)}\n\t\t\t\t\t\tcolor=\"inherit\">\n\t\t\t\t\t\t{remoteConnection === RemoteConnectionStatus.ConnectionOK ? <CloudDoneIcon fontSize=\"small\" /> : <CloudOffIcon fontSize=\"small\" />}\n\t\t\t\t\t</IconButton>\n\t\t\t\t</ThemeTooltip>}\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<ThemeTooltip title={<span>{t(`dashboard.toolbar.connection.${online ? 'on' : 'off'}`)}</span>}>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tcolor=\"inherit\">\n\t\t\t\t\t\t{online ? <CheckCircleIcon fontSize=\"small\" /> : <ErrorIcon fontSize=\"small\" />}\n\t\t\t\t\t</IconButton>\n\t\t\t\t</ThemeTooltip>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<ThemeToggle theme={props.theme} setDarkMode={props.setDarkMode} />\n\t\t\t</div>\n\t\t</Grid>\n\t</div>\n}","import { Grid, useTheme } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { ThemeTooltip } from \"../global/ThemeTooltip\";\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport ArrowDropUpIcon from '@mui/icons-material/ArrowDropUp';\n\ninterface PageToolbarExtenderProps {\n\tcollapsePageToolbar: boolean;\n\ttoggleToolBar: () => void;\n}\n\nexport function PageToolbarExtender(props: PageToolbarExtenderProps) {\n\tconst { t } = useTranslation();\n\tconst theme = useTheme();\n\n\tconst ToggleToolbarIcon = props.collapsePageToolbar ? ArrowDropDownIcon : ArrowDropUpIcon;\n\n\treturn <ThemeTooltip title={<span>{t(`dashboard.toolbar.pages.${props.collapsePageToolbar ? 'show' : 'collapse'}.toolbar`)}</span>} >\n\t\t<div className=\"dashboard-pages-show-toolbar-indicator\"\n\t\t\tonClick={props.toggleToolBar}\n\t\t\tstyle={{\n\t\t\t\tbackgroundColor: theme.palette.background.paper\n\t\t\t}}\n\t\t>\n\t\t\t<Grid\n\t\t\t\tstyle={{ height: '100%', width: '100%' }}\n\t\t\t\tcontainer\n\t\t\t\tdirection=\"row\"\n\t\t\t\tjustifyContent=\"center\"\n\t\t\t\talignItems=\"center\"\n\t\t\t>\n\t\t\t\t<div style={{ marginTop: -7 }}>\n\t\t\t\t\t<ToggleToolbarIcon />\n\t\t\t\t</div>\n\t\t\t</Grid>\n\t\t</div>\n\t</ThemeTooltip>;\n}\n","import { Grid, Paper, useTheme, useMediaQuery, Theme } from \"@material-ui/core\";\nimport { Fragment, useState } from \"react\";\nimport { ThemeTooltip } from \"../global/ThemeTooltip\";\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Divider from '@mui/material/Divider';\nimport DoneIcon from '@mui/icons-material/Done';\nimport { DEFAULT_FONT_RATION, DEFAULT_SUCCEED_ICON_SHOWN } from \"../../infrastructure/consts\";\nimport { inputColor } from \"../../logic/common/themeUtils\";\n\nexport function ToolbarDivider() {\n\tconst desktopMode = useMediaQuery((theme: Theme) => theme.breakpoints.up('sm'));\n\t// Show divider in desktops only\n\treturn !desktopMode ? <Fragment /> : <Divider orientation=\"vertical\" variant=\"middle\" flexItem style={{ margin: DEFAULT_FONT_RATION * 0.5 }} />;\n}\n\nexport interface PageToolbarButtonProps {\n\tloading: boolean;\n\tdisabled: boolean;\n\tIcon: any;\n\ttext: string;\n\ttip?: string;\n\trunAction?: () => Promise<boolean>;\n}\n\n/**\n * Generic toolbar button\n * @param props @see PageToolbarButtonProps\n */\nexport function PageToolbarButton(props: PageToolbarButtonProps) {\n\tconst wideDesktopMode = useMediaQuery((theme: Theme) => theme.breakpoints.up('md'));\n\tconst theme = useTheme();\n\n\tconst [succeed, setSucceed] = useState<boolean>();\n\n\tconst { loading, disabled, Icon, text, tip } = props;\n\n\tasync function callAction() {\n\t\t// Do not call action while success indicator still shown (or there is no action :)\n\t\tif (succeed || !props.runAction) {\n\t\t\treturn;\n\t\t}\n\t\t// Invoke action, and get results\n\t\tconst showDone = await props.runAction();\n\t\t// If succeed show success indicator \n\t\tif (showDone) {\n\t\t\tsetSucceed(true);\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetSucceed(false);\n\t\t\t}, DEFAULT_SUCCEED_ICON_SHOWN.Milliseconds);\n\t\t}\n\t}\n\n\tconst IconToShow = succeed ? DoneIcon : Icon;\n\n\treturn <ThemeTooltip hideTip={!tip} title={<span>{tip}</span>}>\n\t\t<LoadingButton\n\t\t\tstyle={{ margin: 5, color: inputColor(theme) }}\n\t\t\tloading={loading}\n\t\t\tloadingPosition={wideDesktopMode ? 'start' : 'center'}\n\t\t\tdisabled={disabled}\n\t\t\tvariant=\"contained\"\n\t\t\tcolor={'inherit'}\n\t\t\tstartIcon={wideDesktopMode && <IconToShow />}\n\t\t\tonClick={callAction}>\n\t\t\t{!wideDesktopMode\n\t\t\t\t? <IconToShow style={{\n\t\t\t\t\topacity: loading ? 0 : 1 // Hide icon while loading is overriding it\n\t\t\t\t}} />\n\t\t\t\t: text\n\t\t\t}\n\t\t</LoadingButton>\n\t</ThemeTooltip>;\n}\n\ninterface PageToolbarContainerProps {\n\tchildren: JSX.Element;\n\ttoggleToolBar: () => void;\n}\n\nexport function PageToolbarContainer(props: PageToolbarContainerProps) {\n\n\treturn <Grid\n\t\tstyle={{ width: '100%', marginBottom: DEFAULT_FONT_RATION * 0.7 }}\n\t\tcontainer\n\t\tdirection=\"row\"\n\t\tjustifyContent=\"center\"\n\t\talignItems=\"center\"\n\t>\n\t\t<Paper elevation={3}>\n\t\t\t<Grid\n\t\t\t\tstyle={{ width: '100%' }}\n\t\t\t\tcontainer\n\t\t\t\tdirection=\"row\"\n\t\t\t\tjustifyContent=\"center\"\n\t\t\t\talignItems=\"center\"\n\t\t\t>\n\t\t\t\t<div>\n\t\t\t\t\t{props.children}\n\t\t\t\t</div>\n\t\t\t</Grid >\n\t\t</Paper>\n\t</Grid >;\n}\n","import { AppBar, Box, Grid, Tabs, Tab, IconButton, PaletteType, Toolbar, Typography, Theme, makeStyles, useMediaQuery, useTheme } from \"@material-ui/core\";\nimport '../theme/styles/dashboard.scss';\nimport WbIncandescentIcon from '@material-ui/icons/WbIncandescent';\nimport RouterIcon from '@material-ui/icons/Router';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport { SideBarBottom } from '../components/dashboard/SideBarBottom';\nimport { useTranslation } from \"react-i18next\";\nimport { ComponentType, LazyExoticComponent, Suspense, useState } from \"react\";\nimport { getLocalStorageItem, LocalStorageKey, setLocalStorageItem } from \"../infrastructure/local-storage\";\nimport { getLang } from \"../services/localization.service\";\nimport {\n\tHashRouter,\n\tSwitch,\n\tRoute,\n\tRedirect,\n\tuseHistory,\n\tuseLocation\n} from \"react-router-dom\";\nimport React from \"react\";\nimport { Loader } from \"../components/Loader\";\nimport { ProfileAvatar } from \"../components/dashboard/ProfileAvatar\";\nimport SearchIcon from '@mui/icons-material/Search';\nimport { AppRoutes, DashboardRoutes } from \"../infrastructure/consts\";\nimport { ToolBarControls } from \"../components/dashboard/ToolBarControls\";\nimport { sessionManager } from \"../infrastructure/session-manager\";\nimport InputBase from \"@mui/material/InputBase\";\nimport { ThemeTooltip } from \"../components/global/ThemeTooltip\";\nimport Collapse from '@mui/material/Collapse';\nimport { PageToolbarExtender } from \"../components/dashboard/PageToolbarExtender\";\nimport { PageToolbarContainer } from \"../components/dashboard/PageToolbar\";\nimport { MinionsToolbar } from \"../components/toolbars/MinionsToolbar\";\nimport { left, marginLeft } from \"../logic/common/themeUtils\";\nimport casanetLogo from '../static/logo-app.png';\nimport { NetworkToolbar } from \"../components/toolbars/NetworkToolbar\";\nimport { UsersToolbar } from \"../components/toolbars/UsersToolbar\";\n\nconst Minions = React.lazy(() => import('./dashboard-pages/Minions'));\nconst Network = React.lazy(() => import('./dashboard-pages/Network'));\nconst Users = React.lazy(() => import('./dashboard-pages/Users'));\nconst Settings = React.lazy(() => import('./dashboard-pages/Settings'));\nconst Profile = React.lazy(() => import('./dashboard-pages/Profile'));\n\n// Detect the direction, and use the correct arrow direction for extend/collapse side menu\nconst direction = getLang().direction;\nconst LeftArrowIcon = direction === 'rtl' ? ArrowBackIosIcon : ArrowForwardIosIcon;\nconst RightArrowIcon = direction === 'rtl' ? ArrowForwardIosIcon : ArrowBackIosIcon;\n\n/** Any dashboard page, wants to get the dashboard search input value, required to add this to his props */\nexport interface DashboardPageInjectProps {\n\tsearchText?: string;\n}\n\ninterface DashboardProps {\n\ttheme: PaletteType;\n\tsetDarkMode: (paletteType: PaletteType) => void;\n}\n\n/** The interface represents a dashboard page full info for the router and the menus */\ninterface DashboardPage {\n\ticon: JSX.Element;\n\tnameKey: string;\n\t/** The page path (without params if exists) */\n\tpath: string;\n\t/** The page full route definition (including the params if exists) */\n\troute: string;\n\t/** The page component */\n\tcomponents: LazyExoticComponent<ComponentType<any>>;\n\t/** \n\t * Whenever the page supported filter some content by search string.\n\t * if so, a search input will be shown at the app-bar and value will inject to the page\n\t */\n\tsupportedSearch?: boolean;\n\t/**\n\t * The page toolbar (optional)\n\t */\n\ttoolbar?: any;\n\t/**\n\t * Whenever it's page for admins only\n\t */\n\tadminOnly?: boolean;\n}\n\n// Const predefined dimensions of bars menus etc,\nconst sideBarExtendedWidth = 110;\nconst sideBarCollapseWidth = 55;\nconst appBarHight = 64;\nconst footerMenuHight = 90;\nconst pagesToolbarPullUp = 18;\n\nconst useStyles = makeStyles((theme: Theme) => ({\n\tsideBarTab: {\n\t\tminWidth: 'unset', // do not set min width, align to the extend/collapse bar size\n\t\theight: '10vh',\n\t\tminHeight: '10vh',\n\t},\n\tsideBarTabIndicator: {\n\t\tleft: '0px' // Set selected item line indicator to be in left \n\t},\n}));\n\n/** The dashboard pages collection */\nconst dashboardPages: DashboardPage[] = [\n\t{\n\t\ticon: <WbIncandescentIcon />,\n\t\tnameKey: 'global.minions',\n\t\tpath: DashboardRoutes.minions.path,\n\t\troute: `${DashboardRoutes.minions.path}/:${DashboardRoutes.minions.param}?`,\n\t\tcomponents: Minions,\n\t\tsupportedSearch: true,\n\t\ttoolbar: MinionsToolbar,\n\t},\n\t{\n\t\ticon: <RouterIcon />,\n\t\tnameKey: 'global.network',\n\t\tpath: DashboardRoutes.network.path,\n\t\troute: DashboardRoutes.network.path,\n\t\tcomponents: Network,\n\t\tsupportedSearch: true,\n\t\ttoolbar: NetworkToolbar,\n\t},\n\t{\n\t\ticon: <PeopleAltIcon />,\n\t\tnameKey: 'global.users',\n\t\tpath: DashboardRoutes.users.path,\n\t\troute: `${DashboardRoutes.users.path}/:${DashboardRoutes.users.param}?`,\n\t\tcomponents: Users,\n\t\tsupportedSearch: true,\n\t\ttoolbar: UsersToolbar,\n\t\tadminOnly: true\n\t},\n\t{\n\t\ticon: <SettingsIcon />,\n\t\tnameKey: 'global.settings',\n\t\tpath: DashboardRoutes.settings.path,\n\t\troute: DashboardRoutes.settings.path,\n\t\tcomponents: Settings,\n\t}\n];\n\nexport default function Dashboard(props: DashboardProps) {\n\tconst { t } = useTranslation();\n\tconst desktopMode = useMediaQuery((theme: Theme) => theme.breakpoints.up('sm'));\n\tconst theme = useTheme();\n\tconst history = useHistory();\n\tconst classes = useStyles();\n\tconst location = useLocation();\n\tconst [collapseMenu, setCollapseMenu] = useState<boolean>(!!getLocalStorageItem<boolean>(LocalStorageKey.CollapseMenu, { itemType: 'boolean' }));\n\tconst [collapseToolbar, setCollapseToolbar] = useState<boolean>(getLocalStorageItem<boolean>(LocalStorageKey.CollapseAppToolbar, { itemType: 'boolean' }) ?? !desktopMode);\n\tconst [collapsePageToolbar, setCollapsePageToolbar] = useState<boolean>(getLocalStorageItem<boolean>(LocalStorageKey.CollapsePageToolbar, { itemType: 'boolean' }) ?? !desktopMode);\n\tconst [searchText, setSearchText] = useState<string>();\n\n\tfunction toggleCollapseMenu() {\n\t\tconst newCollapseMenuMode = !collapseMenu;\n\t\tsetCollapseMenu(newCollapseMenuMode);\n\t\tsetLocalStorageItem<boolean>(LocalStorageKey.CollapseMenu, newCollapseMenuMode, { itemType: 'boolean' });\n\t}\n\n\tfunction toggleCollapseToolbar() {\n\t\tconst newCollapseToolbar = !collapseToolbar;\n\t\tsetCollapseToolbar(newCollapseToolbar);\n\t\tsetLocalStorageItem<boolean>(LocalStorageKey.CollapseAppToolbar, newCollapseToolbar, { itemType: 'boolean' });\n\t}\n\n\tfunction toggleCollapsePageToolbar() {\n\t\tconst newCollapsePageToolbar = !collapsePageToolbar;\n\t\tsetCollapsePageToolbar(newCollapsePageToolbar);\n\t\tsetLocalStorageItem<boolean>(LocalStorageKey.CollapsePageToolbar, newCollapsePageToolbar, { itemType: 'boolean' });\n\t}\n\n\tconst onTabSelected = (event: React.ChangeEvent<{}>, newValue: number) => {\n\t\t// Once the page has changed, reset the search\n\t\tsetSearchText('');\n\t\thistory.push(dashboardPages[newValue].path);\n\t};\n\n\t// Redirect to login, in user not logged on\n\tif (!sessionManager.isLoggedOn) {\n\t\tconsole.warn('USER NOT LOGGED ON, REDIRECTING TO', AppRoutes.login.path);\n\t\thistory.push(AppRoutes.login.path);\n\t}\n\n\t// Find the current route shown component index  \n\tconst tabIndex = dashboardPages.findIndex(d => location?.pathname?.includes(d.path));\n\n\t// Inject dashboard bars and menu dimension to the global.scss\n\tconst dashboardCssVars = {\n\t\t\"--app-bar-hight\": `${appBarHight}px`,\n\t\t\"--side-bar-extended-width\": `${sideBarExtendedWidth}px`,\n\t\t\"--side-bar-collapse-width\": `${sideBarCollapseWidth}px`,\n\t\t\"--footer-menu-hight\": `${footerMenuHight}px`,\n\t} as React.CSSProperties;\n\n\t// Calculate the box size for the pages content\n\tconst sideMenuWidth = !desktopMode ? 0 : collapseMenu ? sideBarCollapseWidth : sideBarExtendedWidth;\n\tconst routerContainerWidth = !desktopMode ? '100vw' : `calc(100vw - ${sideMenuWidth}px)`;\n\tconst routerContainerHight = `calc(100vh - ${desktopMode ? appBarHight : (appBarHight + footerMenuHight)}px)`;\n\n\t// The properties of the current page in the view\n\tconst dashboardPage = dashboardPages.find(p => location.pathname.startsWith(p.path));\n\n\t// Is user have the permission to see current page\n\tconst accessPageForbidden = !!dashboardPage?.adminOnly && !sessionManager.isAdmin;\n\n\t// Calc if show the toolbar, if it exists for current page, and the user allowed to see this page\n\tconst showPageToolbar = dashboardPage?.toolbar && !accessPageForbidden;\n\n\treturn <div className=\"dashboard-container\" style={dashboardCssVars}>\n\t\t<div className=\"dashboard-header\">\n\t\t\t<AppBar position=\"static\" color=\"default\">\n\t\t\t\t<Toolbar className=\"dashboard-header-tool-box\"\n\t\t\t\t\tstyle={{ backgroundColor: 'inherit' }} // inherit to pomp the color to the dashboard controls component\n\t\t\t\t>\n\t\t\t\t\t<Grid\n\t\t\t\t\t\tstyle={{ backgroundColor: 'inherit' }} // inherit to pomp the color to the dashboard controls component\n\t\t\t\t\t\tcontainer\n\t\t\t\t\t\tdirection=\"row\"\n\t\t\t\t\t\tjustifyContent=\"space-between\"\n\t\t\t\t\t\talignItems=\"center\">\n\t\t\t\t\t\t<div className=\"dashboard-header-tool-box-info\">\n\t\t\t\t\t\t\t<Grid\n\t\t\t\t\t\t\t\tcontainer\n\t\t\t\t\t\t\t\tdirection=\"row\"\n\t\t\t\t\t\t\t\tjustifyContent=\"flex-start\"\n\t\t\t\t\t\t\t\talignItems=\"center\">\n\t\t\t\t\t\t\t\t{!dashboardPage?.supportedSearch\n\t\t\t\t\t\t\t\t\t? <img width={'40px'} height={'40px'} alt=\"casanet-logo\" src={casanetLogo} />\n\t\t\t\t\t\t\t\t\t: <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n\t\t\t\t\t\t\t\t\t\t<SearchIcon />\n\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t{dashboardPage?.supportedSearch && <InputBase\n\t\t\t\t\t\t\t\t\tstyle={{ position: 'fixed', zIndex: 5, marginTop: 3, [left(theme)]: '45px' }}\n\t\t\t\t\t\t\t\t\tsx={{ ml: 1, flex: 1 }}\n\t\t\t\t\t\t\t\t\tplaceholder={t('dashboard.toolbar.search.in.page.content', { pageName: t(dashboardPage.nameKey).toLowerCase() })}\n\t\t\t\t\t\t\t\t\tvalue={searchText}\n\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\tsetSearchText(e.target.value)\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tinputProps={{ 'aria-label': t('dashboard.toolbar.search.in.page.content', { pageName: t(dashboardPage.nameKey).toLowerCase() }) }}\n\t\t\t\t\t\t\t\t/>}\n\t\t\t\t\t\t\t\t{desktopMode && !dashboardPage?.supportedSearch && <Typography variant=\"h6\" style={{ [marginLeft(theme)]: 20 }}>\n\t\t\t\t\t\t\t\t\t{t('general.casanet.dashboard')}\n\t\t\t\t\t\t\t\t</Typography>}\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"dashboard-header-tool-box-controls\"\n\t\t\t\t\t\t\tstyle={{ backgroundColor: 'inherit' }} // inherit the color to make sure if the content is on the search placeholder, it will be covered\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Grid\n\t\t\t\t\t\t\t\tcontainer\n\t\t\t\t\t\t\t\tdirection=\"row\"\n\t\t\t\t\t\t\t\tjustifyContent=\"flex-end\"\n\t\t\t\t\t\t\t\talignItems=\"center\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<ThemeTooltip title={<span>{t(`dashboard.toolbar.${collapseToolbar ? 'extend' : 'collapse'}.controls`)}</span>} enterDelay={100}>\n\t\t\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\t\t\tonClick={toggleCollapseToolbar}\n\t\t\t\t\t\t\t\t\t\t\tcolor=\"inherit\">\n\t\t\t\t\t\t\t\t\t\t\t{!collapseToolbar ? <LeftArrowIcon fontSize=\"small\" /> : <RightArrowIcon fontSize=\"small\" />}\n\t\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t\t</ThemeTooltip>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<Collapse in={!collapseToolbar} orientation={'horizontal'}>\n\t\t\t\t\t\t\t\t\t<div className={`dashboard-toolbar-icons-container`}>\n\t\t\t\t\t\t\t\t\t\t<ToolBarControls theme={props.theme} setDarkMode={props.setDarkMode} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Collapse>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<ProfileAvatar />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\t\t</div>\n\t\t<div className={\"dashboard-content-dashboard\"} style={{ height: `calc(100vh - ${appBarHight}px)` }}>\n\t\t\t{/* Show side menu in desktop mode only */}\n\t\t\t{desktopMode && <div className={`dashboard-side-menu  ${collapseMenu && '--collapse'} `}>\n\t\t\t\t<AppBar position=\"static\" color=\"default\" className={\"dashboard--side-menu-bar\"}>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Box display='flex' className=\"dashboard-side-menu-collapse-icon-container\" flexGrow={1}>\n\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\tonClick={toggleCollapseMenu}\n\t\t\t\t\t\t\t\tcolor=\"inherit\">\n\t\t\t\t\t\t\t\t{collapseMenu ? <LeftArrowIcon fontSize=\"small\" /> : <RightArrowIcon fontSize=\"small\" />}\n\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Tabs\n\t\t\t\t\t\tclassName=\"dashboard-side-menu-tabs\"\n\t\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\t\tvalue={tabIndex}\n\t\t\t\t\t\tonChange={onTabSelected}\n\t\t\t\t\t\tvariant=\"scrollable\"\n\t\t\t\t\t\tscrollButtons=\"auto\"\n\t\t\t\t\t\tindicatorColor=\"primary\"\n\t\t\t\t\t\ttextColor=\"primary\"\n\t\t\t\t\t\taria-label={t('dashboard.pages.menu')}\n\t\t\t\t\t\tclasses={{\n\t\t\t\t\t\t\tindicator: classes.sideBarTabIndicator\n\t\t\t\t\t\t}}\n\n\t\t\t\t\t>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdashboardPages.map(dashboardPage =>\n\t\t\t\t\t\t\t\t<Tab\n\t\t\t\t\t\t\t\t\t// Hide tab for non authorized\n\t\t\t\t\t\t\t\t\tstyle={{ display: dashboardPage.adminOnly && !sessionManager.isAdmin ? 'none' : undefined }}\n\t\t\t\t\t\t\t\t\tid={`dashboard-tab-${dashboardPage.path}`}\n\t\t\t\t\t\t\t\t\taria-controls={`dashboard-tabpanel-${dashboardPage.path}`}\n\t\t\t\t\t\t\t\t\tclassName={classes.sideBarTab}\n\t\t\t\t\t\t\t\t\tlabel={collapseMenu ? '' : t(dashboardPage.nameKey)}\n\t\t\t\t\t\t\t\t\ticon={dashboardPage.icon}\n\t\t\t\t\t\t\t\t\taria-label={t(dashboardPage.nameKey)} />)\n\t\t\t\t\t\t}\n\t\t\t\t\t</Tabs>\n\t\t\t\t\t{!collapseMenu && <div className=\"dashboard-side-menu-bottom-area\">\n\t\t\t\t\t\t<SideBarBottom />\n\t\t\t\t\t</div>}\n\t\t\t\t</AppBar>\n\t\t\t</div>}\n\t\t\t<div className=\"dashboard-router\" style={{\n\t\t\t\tmaxWidth: routerContainerWidth,\n\t\t\t\twidth: routerContainerWidth,\n\t\t\t\tmaxHeight: routerContainerHight,\n\t\t\t\theight: routerContainerHight,\n\t\t\t}} >\n\t\t\t\t<div style={{ width: '100%', height: '100%', maxHeight: '100%' }}>\n\t\t\t\t\t{/* The show pages toolbar button component */}\n\t\t\t\t\t{showPageToolbar && <div\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\t// The formula is : center of the screen + shift left of half of the side-menu and minus half of the component self width\n\t\t\t\t\t\t\t[left(theme)]: `calc(50vw - ${((- (sideMenuWidth * 0.5)) + 60)}px)`,\n\t\t\t\t\t\t\ttop: appBarHight - 10,\n\t\t\t\t\t\t\tzIndex: 3,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<PageToolbarExtender collapsePageToolbar={collapsePageToolbar} toggleToolBar={toggleCollapsePageToolbar} />\n\t\t\t\t\t</div>}\n\t\t\t\t\t{/* The pages toolbar component, pull it up to make it by start under the app-bar */}\n\t\t\t\t\t{showPageToolbar && <div style={{ marginTop: -pagesToolbarPullUp }}>\n\t\t\t\t\t\t<Collapse in={!collapsePageToolbar}>\n\t\t\t\t\t\t\t<PageToolbarContainer toggleToolBar={toggleCollapsePageToolbar}>\n\t\t\t\t\t\t\t\t<dashboardPage.toolbar />\n\t\t\t\t\t\t\t</PageToolbarContainer>\n\t\t\t\t\t\t</Collapse>\n\t\t\t\t\t</div>}\n\t\t\t\t\t{/* On collapse page toolbar, cancel the toolbar marginTop effect */}\n\t\t\t\t\t{showPageToolbar && collapsePageToolbar && <div style={{ marginBottom: pagesToolbarPullUp }} />}\n\t\t\t\t\t<div style={{ width: '100%', height: `calc(100% - ${(showPageToolbar && !collapsePageToolbar) ? appBarHight : 0}px)` }}>\n\t\t\t\t\t\t<Suspense fallback={<Loader />}>\n\t\t\t\t\t\t\t<HashRouter>\n\t\t\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t\t\t{/* Generate route for each page */}\n\t\t\t\t\t\t\t\t\t{dashboardPages.map(dashboardPage =>\n\t\t\t\t\t\t\t\t\t\t<Route exact path={dashboardPage.route}>\n\t\t\t\t\t\t\t\t\t\t\t<dashboardPage.components searchText={searchText} />\n\t\t\t\t\t\t\t\t\t\t</Route>)}\n\t\t\t\t\t\t\t\t\t{/* The profile page is not lined to any page tab */}\n\t\t\t\t\t\t\t\t\t<Route exact path={`${DashboardRoutes.profile.path}/:${DashboardRoutes.profile.param}?`}><Profile /></Route>\n\t\t\t\t\t\t\t\t\t{/* As fallback, redirect to the first page */}\n\t\t\t\t\t\t\t\t\t<Route exact path={[AppRoutes.dashboard.path, `${AppRoutes.dashboard.path}/*`]}>\n\t\t\t\t\t\t\t\t\t\t<Redirect to={dashboardPages[0].path} />\n\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t</Switch>\n\t\t\t\t\t\t\t</HashRouter>\n\t\t\t\t\t\t</Suspense>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t{/* Show footer menu in mobile mode only */}\n\t\t{!desktopMode && <div className=\"dashboard-footer-menu\">\n\t\t\t<AppBar position=\"static\" color=\"default\">\n\t\t\t\t<Tabs\n\t\t\t\t\tvalue={tabIndex}\n\t\t\t\t\tonChange={onTabSelected}\n\t\t\t\t\tvariant=\"fullWidth\"\n\t\t\t\t\tscrollButtons=\"auto\"\n\t\t\t\t\tindicatorColor=\"primary\"\n\t\t\t\t\ttextColor=\"primary\"\n\t\t\t\t\taria-label={t('dashboard.pages.menu')}\n\t\t\t\t>\n\t\t\t\t\t{\n\t\t\t\t\t\tdashboardPages.map(dashboardPage =>\n\t\t\t\t\t\t\t<Tab\n\t\t\t\t\t\t\t\t// Hide tab for non authorized\n\t\t\t\t\t\t\t\tstyle={{ display: dashboardPage.adminOnly && !sessionManager.isAdmin ? 'none' : undefined }}\n\t\t\t\t\t\t\t\tid={`dashboard-tab-${dashboardPage.path}`}\n\t\t\t\t\t\t\t\taria-controls={`dashboard-tabpanel-${dashboardPage.path}`}\n\t\t\t\t\t\t\t\tclassName={classes.sideBarTab}\n\t\t\t\t\t\t\t\tlabel={t(dashboardPage.nameKey)}\n\t\t\t\t\t\t\t\ticon={dashboardPage.icon}\n\t\t\t\t\t\t\t\taria-label={t(dashboardPage.nameKey)} />)\n\t\t\t\t\t}\n\t\t\t\t</Tabs>\n\t\t\t</AppBar>\n\t\t</div>}\n\t</div>\n}","import { Grid } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport AddIcon from '@mui/icons-material/Add';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport FindReplaceIcon from '@mui/icons-material/FindReplace';\nimport TrackChangesIcon from '@mui/icons-material/TrackChanges';\nimport { PageToolbarButton, ToolbarDivider } from \"../dashboard/PageToolbar\";\nimport { minionsService } from \"../../services/minions.service\";\nimport { handleServerRestError, postApiError } from \"../../services/notifications.service\";\nimport { useState } from \"react\";\nimport { ApiFacade } from \"../../infrastructure/generated/proxies/api-proxies\";\nimport { sleep } from \"../../infrastructure/utils\";\nimport { Duration } from \"unitsnet-js\";\nimport { ErrorResponse, ProgressStatus } from \"../../infrastructure/generated/api\";\nimport { useHistory } from \"react-router-dom\";\nimport { CREATE_MINION_PATH } from \"../../infrastructure/consts\";\n\nexport function MinionsToolbar() {\n\tconst { t } = useTranslation();\n\tconst history = useHistory();\n\n\t// TODO use effect as in version to detect nscaning progress\n\n\tconst [refreshing, setRefreshing] = useState<boolean>(false);\n\tconst [rereading, setRereading] = useState<boolean>(false);\n\tconst [rescanning, setRescanning] = useState<boolean>(false);\n\n\tasync function createMinion(): Promise<boolean> {\n\t\t// Route to the create minion path\n\t\thistory.push(CREATE_MINION_PATH);\n\t\t// Return false in order to not show the succeed icon, since it's pointless, only move route, yes? \n\t\treturn false;\n\t}\n\n\tasync function refresh(): Promise<boolean> {\n\t\tsetRefreshing(true);\n\t\tlet succeed = false;\n\t\ttry {\n\t\t\tawait minionsService.forceFetchData();\n\t\t\tsucceed = true;\n\t\t} catch (error) {\n\t\t\thandleServerRestError(error);\n\t\t}\n\t\tsetRefreshing(false);\n\t\treturn succeed;\n\t}\n\n\t/**\n\t * Rescan minions status\n\t * @param scanNetworkFirst Set true to scan the network devices first \n\t * @returns True if succeed\n\t */\n\tasync function rescanMinions(scanNetworkFirst: boolean): Promise<boolean> {\n\t\tlet succeed = false;\n\t\ttry {\n\t\t\t// Trigger the scan\n\t\t\tawait ApiFacade.MinionsApi.rescanMinionsStatus(scanNetworkFirst);\n\n\t\t\t// Start the ack's to detect the scan results\n\t\t\tlet updateStatus: ProgressStatus = ProgressStatus.InProgress;\n\t\t\t// Run till the status is not InProgress\n\t\t\twhile (updateStatus === ProgressStatus.InProgress) {\n\t\t\t\t// Ask for the scan status\n\t\t\t\tconst currentStatus = await ApiFacade.MinionsApi.getSescaningMinionsStatus();\n\t\t\t\tupdateStatus = currentStatus.scanningStatus;\n\t\t\t\t// Await a while till next try\n\t\t\t\tawait sleep(Duration.FromSeconds(5));\n\t\t\t}\n\n\t\t\tif (updateStatus === ProgressStatus.Fail) {\n\t\t\t\t// eslint-disable-next-line no-throw-literal\n\t\t\t\tpostApiError({ responseCode: 1501 } as ErrorResponse);\n\t\t\t} else {\n\t\t\t\t// Once it's done force fetch minions again\n\t\t\t\tawait minionsService.forceFetchData();\n\t\t\t\tsucceed = true;\n\t\t\t}\n\n\t\t} catch (error) {\n\t\t\thandleServerRestError(error);\n\t\t}\n\t\treturn succeed;\n\t}\n\n\t/** Read minions statuses without rescaning network first */\n\tasync function reread(): Promise<boolean> {\n\t\tsetRereading(true);\n\t\tconst succeed = await rescanMinions(false);\n\t\tsetRereading(false);\n\t\treturn succeed;\n\t}\n\n\t/** Read minions statuses with rescaning network first */\n\tasync function rescan(): Promise<boolean> {\n\t\tsetRescanning(true);\n\t\tconst succeed = await rescanMinions(true);\n\t\tsetRescanning(false);\n\t\treturn succeed;\n\t}\n\n\treturn <Grid\n\t\tstyle={{ padding: 10 }}\n\t\tcontainer\n\t\tdirection=\"row\"\n\t\tjustifyContent=\"center\"\n\t\talignItems=\"center\"\n\t>\n\t\t<PageToolbarButton\n\t\t\tloading={false}\n\t\t\tdisabled={false}\n\t\t\trunAction={createMinion}\n\t\t\ttext={t('dashboard.toolbar.pages.minions.create.minion')}\n\t\t\tIcon={AddIcon}\n\t\t\ttip={t('dashboard.toolbar.pages.minions.create.minion.tip')}\n\t\t/>\n\t\t<ToolbarDivider />\n\t\t<PageToolbarButton\n\t\t\tloading={refreshing}\n\t\t\tdisabled={refreshing}\n\t\t\trunAction={refresh}\n\t\t\ttext={t('global.refresh')}\n\t\t\tIcon={RefreshIcon}\n\t\t\ttip={t('dashboard.toolbar.pages.minions.refresh.tip')}\n\t\t/>\n\t\t<ToolbarDivider />\n\t\t<PageToolbarButton\n\t\t\tloading={rereading}\n\t\t\tdisabled={rereading || rescanning}\n\t\t\trunAction={reread}\n\t\t\ttext={t('dashboard.toolbar.pages.minions.re.read')}\n\t\t\tIcon={FindReplaceIcon}\n\t\t\ttip={t('dashboard.toolbar.pages.minions.re.read.tip')}\n\t\t/>\n\t\t<ToolbarDivider />\n\t\t<PageToolbarButton\n\t\t\tloading={rescanning}\n\t\t\tdisabled={rereading || rescanning}\n\t\t\trunAction={rescan}\n\t\t\ttext={t('dashboard.toolbar.pages.minions.re.scan')}\n\t\t\tIcon={TrackChangesIcon}\n\t\t\ttip={t('dashboard.toolbar.pages.minions.re.scan.tip')}\n\t\t/>\n\t</Grid>;\n}\n","import { Grid } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport TrackChangesIcon from '@mui/icons-material/TrackChanges';\nimport { PageToolbarButton, ToolbarDivider } from \"../dashboard/PageToolbar\";\nimport { handleServerRestError } from \"../../services/notifications.service\";\nimport { useState } from \"react\";\nimport { ApiFacade } from \"../../infrastructure/generated/proxies/api-proxies\";\nimport { devicesService } from \"../../services/devices.service\";\n\nexport function NetworkToolbar() {\n\tconst { t } = useTranslation();\n\n\tconst [refreshing, setRefreshing] = useState<boolean>(false);\n\tconst [rescanning, setRescanning] = useState<boolean>(false);\n\n\tasync function refresh(): Promise<boolean> {\n\t\tsetRefreshing(true);\n\t\tlet succeed = false;\n\t\ttry {\n\t\t\tawait devicesService.forceFetchData();\n\t\t\tsucceed = true;\n\t\t} catch (error) {\n\t\t\thandleServerRestError(error);\n\t\t}\n\t\tsetRefreshing(false);\n\t\treturn succeed;\n\t}\n\n\t/** Scan local network */\n\tasync function rescan(): Promise<boolean> {\n\t\tlet succeed = false;\n\t\tsetRescanning(true);\n\t\ttry {\n\t\t\tawait ApiFacade.DevicesApi.rescanDevices();\n\t\t\t// Once scan finished, fetch the new changes and update the service subscribers\n\t\t\tawait devicesService.forceFetchData();\n\t\t\tsucceed = true;\n\t\t} catch (error) {\n\t\t\thandleServerRestError(error);\n\t\t}\n\t\tsetRescanning(false);\n\t\treturn succeed;\n\t}\n\n\treturn <Grid\n\t\tstyle={{ padding: 10 }}\n\t\tcontainer\n\t\tdirection=\"row\"\n\t\tjustifyContent=\"center\"\n\t\talignItems=\"center\"\n\t>\n\t\t<PageToolbarButton\n\t\t\tloading={refreshing}\n\t\t\tdisabled={refreshing}\n\t\t\trunAction={refresh}\n\t\t\ttext={t('global.refresh')}\n\t\t\tIcon={RefreshIcon}\n\t\t\ttip={t('dashboard.toolbar.pages.network.refresh.tip')}\n\t\t/>\n\t\t<ToolbarDivider />\n\t\t<PageToolbarButton\n\t\t\tloading={rescanning}\n\t\t\tdisabled={rescanning}\n\t\t\trunAction={rescan}\n\t\t\ttext={t('dashboard.toolbar.pages.network.re.scan')}\n\t\t\tIcon={TrackChangesIcon}\n\t\t\ttip={t('dashboard.toolbar.pages.network.re.scan.tip')}\n\t\t/>\n\t</Grid>;\n}\n","import { Grid } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport { PageToolbarButton, ToolbarDivider } from \"../dashboard/PageToolbar\";\nimport { handleServerRestError } from \"../../services/notifications.service\";\nimport { useState } from \"react\";\nimport { usersService } from \"../../services/users.service\";\nimport AddIcon from '@mui/icons-material/Add';\nimport { useHistory } from \"react-router-dom\";\nimport { CREATE_USER_PATH, DEFAULT_FONT_RATION } from \"../../infrastructure/consts\";\n\nexport function UsersToolbar() {\n\tconst { t } = useTranslation();\n\tconst history = useHistory();\n\n\tconst [refreshing, setRefreshing] = useState<boolean>(false);\n\n\tasync function createUser(): Promise<boolean> {\n\t\t// Route to the create user path\n\t\thistory.push(CREATE_USER_PATH);\n\t\t// Return false in order to not show the succeed icon, since it's pointless, only move route, yes? \n\t\treturn false;\n\t}\n\n\tasync function refresh(): Promise<boolean> {\n\t\tsetRefreshing(true);\n\t\tlet succeed = false;\n\t\ttry {\n\t\t\tawait usersService.forceFetchData();\n\t\t\tsucceed = true;\n\t\t} catch (error) {\n\t\t\thandleServerRestError(error);\n\t\t}\n\t\tsetRefreshing(false);\n\t\treturn succeed;\n\t}\n\n\treturn <Grid\n\t\tstyle={{ padding: DEFAULT_FONT_RATION * 0.5 }}\n\t\tcontainer\n\t\tdirection=\"row\"\n\t\tjustifyContent=\"center\"\n\t\talignItems=\"center\"\n\t>\n\t\t<PageToolbarButton\n\t\t\tloading={false}\n\t\t\tdisabled={false}\n\t\t\trunAction={createUser}\n\t\t\ttext={t('dashboard.toolbar.pages.users.create.user')}\n\t\t\tIcon={AddIcon}\n\t\t\ttip={t('dashboard.toolbar.pages.users.create.user.tip')}\n\t\t/>\n\t\t<ToolbarDivider />\n\t\t<PageToolbarButton\n\t\t\tloading={refreshing}\n\t\t\tdisabled={refreshing}\n\t\t\trunAction={refresh}\n\t\t\ttext={t('global.refresh')}\n\t\t\tIcon={RefreshIcon}\n\t\t\ttip={t('dashboard.toolbar.pages.users.refresh.tip')}\n\t\t/>\n\t</Grid>;\n}\n"],"sourceRoot":""}