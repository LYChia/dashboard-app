{"version":3,"sources":["logo.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","prefersDarkMode","useMediaQuery","useState","localStorage","getItem","darkMode","setDarkMode","api","setApi","theme","React","useMemo","createTheme","palette","type","useEffect","a","fetch","res","json","apis","t","useTranslation","setItem","v","Date","selectedDate","setSelectedDate","handleDateChange","date","className","ThemeProvider","CssBaseline","src","logo","alt","CircularProgress","utils","DateFnsUtils","Grid","container","justifyContent","disableToolbar","variant","format","margin","id","label","value","onChange","KeyboardButtonProps","device","platform","onClick","newMode","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","i18n","use","initReactI18next","init","resources","en","translation","he","lng","fallbackLng","interpolation","escapeValue","root","document","getElementById","setAttribute","startApp","ReactDOM","render","StrictMode","window","cordova","addEventListener","globalThis"],"mappings":"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","file":"static/js/main.406f7359.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'date-fns';\nimport { CircularProgress, createTheme, PaletteType, ThemeProvider, useMediaQuery } from '@material-ui/core';\nimport { KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { useTranslation } from 'react-i18next';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n// import 'cordova-plugin-device';\n\n// Device.\n\n\nfunction App() {\n\tconst prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\tconst [darkMode, setDarkMode] = useState<PaletteType>(localStorage.getItem('prefersDarkMode') || prefersDarkMode ? 'dark' : 'light');\n\tconst [api, setApi] = useState<any>({});\n\tconst theme = React.useMemo(\n\t\t() => {\n\t\t\t// const prefersDarkModeCache = localStorage.getItem('prefersDarkMode') || prefersDarkMode;\n\t\t\treturn createTheme({\n\t\t\t\tpalette: {\n\t\t\t\t\ttype: darkMode,\n\t\t\t\t\t// type: 'dark',\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\t\t,\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\t[prefersDarkMode, darkMode],\n\t);\n\tuseEffect(() => {\n\t\t(async() => {\n\t\t\tconst res = await fetch('https://api.chucknorris.io/jokes/random');\n\t\t\tconst apis = await res.json();\n\t\t\tsetApi(apis);\n\t\t})();\n\t}, [])\n\n\tconst { t } = useTranslation();\n\n\tlocalStorage.setItem('a', 'v');\n\tconst v = localStorage.getItem('a');\n\t// The first commit of Material-UI\n\tconst [selectedDate, setSelectedDate] = React.useState<Date | null>(\n\t\tnew Date('2014-08-18T21:11:54'),\n\t);\n\n\tconst toggleDark = () => {\n\t\tconst newMode = darkMode === 'dark' ? 'light' : 'dark';\n\t\tlocalStorage.setItem('prefersDarkMode', newMode);\n\t\tsetDarkMode(newMode);\n\t};\n\n\tconst handleDateChange = (date: Date | null) => {\n\t\tsetSelectedDate(date);\n\t};\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<ThemeProvider theme={theme}>\n\t\t\t\t<CssBaseline />\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t\t<CircularProgress />\n\t\t\t\t\t<MuiPickersUtilsProvider utils={DateFnsUtils}>\n\t\t\t\t\t\t<Grid container justifyContent=\"space-around\">\n\t\t\t\t\t\t\t<KeyboardDatePicker\n\t\t\t\t\t\t\t\tdisableToolbar\n\t\t\t\t\t\t\t\tvariant=\"inline\"\n\t\t\t\t\t\t\t\tformat=\"MM/dd/yyyy\"\n\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\tid=\"date-picker-inline\"\n\t\t\t\t\t\t\t\t// label=\"Date picker inline\"\n\t\t\t\t\t\t\t\tlabel=\"בחר תאריך\"\n\t\t\t\t\t\t\t\tvalue={selectedDate}\n\t\t\t\t\t\t\t\tonChange={handleDateChange}\n\t\t\t\t\t\t\t\tKeyboardButtonProps={{\n\t\t\t\t\t\t\t\t\t'aria-label': 'change date',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<KeyboardDatePicker\n\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\tid=\"date-picker-dialog\"\n\t\t\t\t\t\t\t\tlabel=\"Date picker dialog\"\n\t\t\t\t\t\t\t\tformat=\"MM/dd/yyyy\"\n\t\t\t\t\t\t\t\tvalue={selectedDate}\n\t\t\t\t\t\t\t\tonChange={handleDateChange}\n\t\t\t\t\t\t\t\tKeyboardButtonProps={{\n\t\t\t\t\t\t\t\t\t'aria-label': 'change date',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<KeyboardTimePicker\n\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\tid=\"time-picker\"\n\t\t\t\t\t\t\t\tlabel=\"Time picker\"\n\t\t\t\t\t\t\t\tvalue={selectedDate}\n\t\t\t\t\t\t\t\tonChange={handleDateChange}\n\t\t\t\t\t\t\t\tKeyboardButtonProps={{\n\t\t\t\t\t\t\t\t\t'aria-label': 'change time',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</MuiPickersUtilsProvider>\n\t\t\t\t\t{device.platform + v}\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{t('Welcome to React')}\n\t\t\t\t\t</div>\n\t\t\t\t\t{api?.value || 'loading'}\n\t\t\t\t\t<p onClick={toggleDark}>\n\t\t\t\t\t\tEdit <code>src/App.tsx</code> and save to reload.\n\t\t\t\t\t</p>\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName=\"App-link\"\n\t\t\t\t\t\thref=\"https://reactjs.org\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t\t>\n\t\t\t\t\t\tLearn React\n\t\t\t\t\t</a>\n\t\t\t\t</header>\n\t\t\t</ThemeProvider>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    // the translations\n    // (tip move them in a JSON file and import them,\n    // or even better, manage them via a UI: https://react.i18next.com/guides/multiple-translation-files#manage-your-translations-with-a-management-gui)\n    resources: {\n      en: {\n        translation: {\n          \"Welcome to React\": \"Welcome to React and react-i18next\"\n        }\n      },\n\t\t\the: {\n        translation: {\n          \"Welcome to React\": \"ברוכים הבאים ל React ו react-i18next\"\n        }\n      }\n    },\n    lng: \"he\", // if you're using a language detector, do not define the lng option\n    fallbackLng: \"en\",\n    interpolation: {\n      escapeValue: false // react already safes from xss => https://www.i18next.com/translation-function/interpolation#unescape\n    }\n  });\n\nconst root = document.getElementById('root');\nroot?.setAttribute('dir', 'rtl');\nconst startApp = () => {\n\t// console.log(device.cordova);\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n\n  // If you want to start measuring performance in your app, pass a function\n  // to log results (for example: reportWebVitals(console.log))\n  // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n  reportWebVitals();\n};\n\ndeclare var window: Window & {\n  cordova: unknown;\n};\n\nif(window.cordova) {\n  document.addEventListener('deviceready', startApp, false);\n} else {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tglobalThis.device = { platform : 'Browser' } as Device;\n  startApp();\n}\n"],"sourceRoot":""}